<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>狂神大前端</title>
    <url>/2021/07/04/%E7%8B%82%E7%A5%9E%E5%A4%A7%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><ul>
<li>emment语法简化操作</li>
</ul>
<h1 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h1><p> <img src="https://api2.mubu.com/v3/document_image/34b8ed30-f8e4-455f-b4ce-4a5d3f08a29b-3810853.jpg" alt="img">                            </p>
<h1 id="nodejs了解"><a href="#nodejs了解" class="headerlink" title="nodejs了解"></a>nodejs了解</h1><ul>
<li>是将javascript解释给操作系统的Chromv8引擎</li>
<li>直接通过node命令运行</li>
</ul>
<h1 id="nodejs实现httpserver"><a href="#nodejs实现httpserver" class="headerlink" title="nodejs实现httpserver                                "></a>nodejs实现httpserver                                <img src="https://api2.mubu.com/v3/document_image/0a8868b8-acc4-4993-8e2b-580cdc214169-3810853.jpg" alt="img"></h1><p>思路</p>
<ul>
<li><p>通过require导入http包</p>
</li>
<li><p>createServer创建服务</p>
<ul>
<li>response指定状态码和解释格式</li>
<li>request.end(“”)输出内容</li>
<li>监听8080端口</li>
</ul>
<a id="more"></a>

</li>
</ul>
<h1 id="nodejs连接数据库"><a href="#nodejs连接数据库" class="headerlink" title="nodejs连接数据库"></a>nodejs连接数据库</h1><ul>
<li><p>mysql不是nodejs内置的包，需要通过npm导入依赖，才能require</p>
</li>
<li><p>导入mysql依赖，创建connencttion并连接</p>
<p><img src="https://api2.mubu.com/v3/document_image/7ac234a2-0555-42ba-9206-9ddd9fe86b15-3810853.jpg" alt="img">                            </p>
</li>
<li><p>通过query语句查询，并通过回调函数得到结果                           <img src="https://api2.mubu.com/v3/document_image/dc91392a-7ab0-4196-ab3a-1ab5c59f76eb-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id><a href="#—" class="headerlink" title="—"></a>—</h1><h1 id="es6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><ul>
<li>ES6是一个javascript的标准规范</li>
</ul>
<h1 id="let和count"><a href="#let和count" class="headerlink" title="let和count"></a>let和count</h1><ul>
<li><p>变量用let,常量用const</p>
<p><img src="https://api2.mubu.com/v3/document_image/881c0e1c-f40e-46bf-b4c3-acc58713adae-3810853.jpg" alt="img">                            </p>
</li>
<li><p>解决了变量穿透、常量修改的问题                                <img src="https://api2.mubu.com/v3/document_image/1ffc0ddf-6423-49ba-a604-979c9d323859-3810853.jpg" alt="img">                            </p>
</li>
<li><p>如果循环中变量是用var定义的，在循环外还能输出该变量</p>
</li>
<li><p>在有些低版本的浏览器中可能不支持let和count，常在开发小程序中用</p>
</li>
</ul>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><ul>
<li>用反引号”`”包裹字符串，在里面用${}来调用javascript对象属性                    <img src="https://api2.mubu.com/v3/document_image/4694f917-2f26-4837-abd1-ab3ab5f9b8ae-3810853.jpg" alt="img">                            </li>
<li>而且支持直接换行写，不同担心拼接</li>
</ul>
<h1 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h1><ul>
<li><p>可以在参数处指定默认参数</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/b39d0836-a14b-43d5-81ab-e843cb5aacd6-3810853.jpg" alt="img">                            </p>
</li>
<li><p>如果不指定，默认为undefined，两个数相加会出现NaN</p>
</li>
</ul>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><ul>
<li>下图四个规律掌握即可                           <img src="https://api2.mubu.com/v3/document_image/39e06410-54d9-4df9-9793-e549be686470-3810853.jpg" alt="img">                            </li>
<li>例：数组全部乘2</li>
</ul>
<h1 id="对象简化"><a href="#对象简化" class="headerlink" title="对象简化"></a>对象简化</h1><ul>
<li>对象里的方法可以把冒号和function都去掉，仅剩一个（）</li>
<li>对象的参数名如果和已有变量名一致，且取值也一致，则可以只写个参数名                                <img src="https://api2.mubu.com/v3/document_image/dff44a56-a346-4e9b-99bf-9cfbe90b62cd-3810853.jpg" alt="img">                            </li>
<li>案例：在ajax中可以使用</li>
</ul>
<h1 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h1><ul>
<li><p>直接通过大括号对多个变量赋予对象相应的值</p>
<p><img src="https://api2.mubu.com/v3/document_image/5b427c0e-b6d9-4730-99d8-a4a928ecbe2b-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="对象传播符"><a href="#对象传播符" class="headerlink" title="对象传播符"></a>对象传播符</h1><ul>
<li>…person2将person还没解构的数据给了person2                             <img src="https://api2.mubu.com/v3/document_image/2ec93b73-ea2e-4f81-90c1-c248f14e7977-3810853.jpg" alt="img">                            </li>
<li>想把某个javascript对象拆开使用可以这么用</li>
</ul>
<h1 id="数组map"><a href="#数组map" class="headerlink" title="数组map"></a>数组map</h1><ul>
<li>map会自带循环，并且将处理的值返回对应的位置   <img src="https://api2.mubu.com/v3/document_image/0774028b-0680-4f70-a166-6fdaff8caa0f-3810853.jpg" alt="img">                            </li>
<li>箭头函数简化                           <img src="https://api2.mubu.com/v3/document_image/85331e1f-d2d9-4ea7-8415-36f1c4d6f4e6-3810853.jpg" alt="img">                            </li>
<li>循环修改数组对象中的某个值                              <img src="https://api2.mubu.com/v3/document_image/918ee0f0-5290-429b-ad18-59ce6053e5ef-3810853.jpg" alt="img">                            </li>
<li>可以这样给对象增加字段</li>
<li>  <img src="https://api2.mubu.com/v3/document_image/39c44962-14f3-42ee-999b-45b7867ae654-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="数组reduce"><a href="#数组reduce" class="headerlink" title="数组reduce"></a>数组reduce</h1><ul>
<li><p>相邻迭代操作</p>
<p>   <img src="https://api2.mubu.com/v3/document_image/e2b2905f-a88b-424d-b6dc-35fcf92c1f14-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id><a href="#—–" class="headerlink" title="—–"></a>—–</h1><h1 id="npm包管理器快速构建项目"><a href="#npm包管理器快速构建项目" class="headerlink" title="npm包管理器快速构建项目"></a>npm包管理器快速构建项目</h1><ul>
<li>通过npm init快速创建nodejs工程                             <img src="https://api2.mubu.com/v3/document_image/fdc70269-b02a-4c5d-bd30-991693407eeb-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="npm安装模块依赖"><a href="#npm安装模块依赖" class="headerlink" title="npm安装模块依赖"></a>npm安装模块依赖</h1><ul>
<li><p>npm  init -y 会以默认方式创建配置文件</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/c0450b92-4272-44a5-8a6c-401573595843-3810853.jpg" alt="img">                            </p>
</li>
<li><p>pacackge.json的价值就是在新建项目时快速复用                              <img src="https://api2.mubu.com/v3/document_image/db8427dc-78b5-4e98-9914-baf8dc0b9571-3810853.jpg" alt="img">                            </p>
</li>
<li><p>镜像设置                            <img src="https://api2.mubu.com/v3/document_image/ab2ec69e-60a1-4d97-9c08-527a90b04c6d-3810853.jpg" alt="img">                            </p>
</li>
<li><p>下载指定版本号或者卸载                             <img src="https://api2.mubu.com/v3/document_image/e4e99ee6-9a37-4ff7-b2f6-a79ece6912fb-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="bable的安装"><a href="#Bable的安装" class="headerlink" title="Bable的安装"></a>Bable的安装</h1><ul>
<li><p>让ES6的某些语法能够在一些不支持的浏览器中运行</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/08e74cde-fa2c-4c55-8e2d-2308bfd4e693-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="bable的使用"><a href="#Bable的使用" class="headerlink" title="Bable的使用"></a>Bable的使用</h1><ul>
<li><p>初始化nodejs,创建src文件，在src中写es6代码</p>
<p> <img src="https://api2.mubu.com/v3/document_image/89f87ae4-b737-4ddb-8392-7ddda6e823f2-3810853.jpg" alt="img">                            </p>
</li>
<li><p>创建.babalrc配置文件，在里面配置es需要转化的版本</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/f8396668-002b-43e4-90a3-b5e120d2b47d-3810853.jpg" alt="img">                            </p>
</li>
<li><p>使用npm命令下载babel并转换</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/60e176e1-8240-49b7-aff8-1581a2925d9a-3810853.jpg" alt="img">                            </p>
</li>
<li><p>使用命令转换结果将显示在dist文件夹中</p>
<p>   <img src="https://api2.mubu.com/v3/document_image/aff1aca5-93f8-4250-9cb5-662f09fc45c9-3810853.jpg" alt="img">                            </p>
</li>
<li><p>node直接执行dist文件夹中的即可</p>
</li>
</ul>
<h1 id="自定义命令脚本"><a href="#自定义命令脚本" class="headerlink" title="自定义命令脚本"></a>自定义命令脚本</h1><ul>
<li><p>将命令以键值对的方式存在package配置文件中</p>
<p><img src="https://api2.mubu.com/v3/document_image/683c9471-fffc-478a-a856-7c799ebd4df5-3810853.jpg" alt="img">                            </p>
</li>
<li><p>用改命令直接执行相应的模块</p>
<p>​    <img src="https://api2.mubu.com/v3/document_image/077133a0-d1c1-4c19-bf62-9733a6b96fed-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="commenjs模块化开发"><a href="#CommenJS模块化开发" class="headerlink" title="CommenJS模块化开发"></a>CommenJS模块化开发</h1><ul>
<li><p>定义方法并导出</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/219d223f-b0d8-43ae-a802-b912f7cd2fd0-3810853.jpg" alt="img">                            </p>
</li>
<li><p>引入并使用导出的方法</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/8286c50e-cc69-4972-8ff2-de0bcb06eea4-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="es6简化模块开发"><a href="#ES6简化模块开发" class="headerlink" title="ES6简化模块开发"></a>ES6简化模块开发</h1><ul>
<li><p>打包</p>
<p>​    <img src="https://api2.mubu.com/v3/document_image/b720c475-332c-4f66-a827-6af55b3237fd-3810853.jpg" alt="img">                            </p>
</li>
<li><p>导入使用，将导入的定义成对象</p>
<p> <img src="https://api2.mubu.com/v3/document_image/0e69d0f2-7f3d-4977-908f-01bc4ecdd064-3810853.jpg" alt="img">                            </p>
</li>
<li><p>浏览器默认不支持es6的语法，所以要结合bable使用</p>
</li>
</ul>
<h1 id="webpack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h1><ul>
<li><p>合并静态资源并加密，更安全更快速</p>
</li>
<li><p>安装</p>
<p> <img src="https://api2.mubu.com/v3/document_image/514eb076-f66a-4082-a068-d67d890e1f40-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="webpack打包js"><a href="#webpack打包js" class="headerlink" title="webpack打包js"></a>webpack打包js</h1><ul>
<li><p>webpack.config.js配置文件</p>
<p> <img src="https://api2.mubu.com/v3/document_image/09581f30-2b6c-4fa9-8913-c7f92c8262df-3810853.jpg" alt="img">                            </p>
</li>
<li><p>webpack.config.js文件配置入口，打包目录，以及打包js名称                              <img src="https://api2.mubu.com/v3/document_image/3f8d5d43-72fa-4052-bc59-e3fc83416963-3810853.jpg" alt="img">                            </p>
</li>
<li><p>_dirname是一个常量，表示当前根目录</p>
</li>
</ul>
<h1 id="webpack打包css"><a href="#webpack打包css" class="headerlink" title="webpack打包css"></a>webpack打包css</h1><ul>
<li><p>安装两个loader来打包css</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/5c881ccf-5a8e-426f-b968-ff2e0f83d79d-3810853.jpg" alt="img">                            </p>
</li>
<li><p>在webpack.config.js文件中定义一个model                             <img src="https://api2.mubu.com/v3/document_image/28f5d836-93f1-4200-b805-3b673d36f864-3810853.jpg" alt="img">                            </p>
</li>
<li><p>在入口函数中导入相应的css</p>
<p> <img src="https://api2.mubu.com/v3/document_image/73e59ede-bded-4115-9fa8-36ec16896341-3810853.jpg" alt="img">                            </p>
</li>
<li><p>可以让webpack处于监听状态，修改保存即可</p>
<p> <img src="https://api2.mubu.com/v3/document_image/e17c6f7a-bba5-4d2c-9a46-62dde6431a04-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="-"><a href="#—-1" class="headerlink" title="—-"></a>—-</h1><p>VueElementAdmin开源项目推荐</p>
]]></content>
      <tags>
        <tag>笔记狂神系列</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马java数据结构</title>
    <url>/2021/07/03/%E9%BB%91%E9%A9%ACJava%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="数据结构与算法概述"><a href="#数据结构与算法概述" class="headerlink" title="数据结构与算法概述"></a>数据结构与算法概述</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul>
<li>有一定关系的元素的集合</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>逻辑结构<ul>
<li>集合结构</li>
<li>线性结构</li>
<li>树形结构</li>
<li>图结构</li>
</ul>
</li>
<li>物理结构<ul>
<li>顺序结构</li>
<li>链式结构（插入更方便）</li>
</ul>
</li>
</ul>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul>
<li>时间花费少，空间利用少</li>
</ul>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li>核心操作的执行次数和输入规模的关联（形成一个函数关系）<ul>
<li>​    <img src="https://api2.mubu.com/v3/document_image/caa7b99e-ee52-4edf-8269-d855582c7d33-3810853.jpg" alt="img">  </li>
</ul>
</li>
</ul>
<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><ul>
<li>和常数无关，只和变量的指数有关<ul>
<li>​    <img src="https://api2.mubu.com/v3/document_image/557b2c96-8d73-476b-b1ab-89c637585fb1-3810853.jpg" alt="img">  </li>
</ul>
</li>
</ul>
<h3 id="大o记法"><a href="#大O记法" class="headerlink" title="大O记法"></a>大O记法</h3><ul>
<li><ul>
<li>​    <img src="https://api2.mubu.com/v3/document_image/7ba1454b-afab-449f-b0e2-bed17549cbdf-3810853.jpg" alt="img">  </li>
</ul>
</li>
</ul>
<h3 id="常见的大o记法"><a href="#常见的大O记法" class="headerlink" title="常见的大O记法"></a>常见的大O记法</h3><ul>
<li>比较<ul>
<li>​    <img src="https://api2.mubu.com/v3/document_image/da5ad32a-8cb0-4dda-9a1b-d2a210027b9f-3810853.jpg" alt="img">  </li>
</ul>
</li>
<li>线性阶</li>
<li>平方阶</li>
<li>立方阶</li>
<li>对数阶</li>
<li>常数阶</li>
</ul>
<h3 id="最坏情况"><a href="#最坏情况" class="headerlink" title="最坏情况"></a>最坏情况</h3><ul>
<li><ul>
<li>​    <img src="https://api2.mubu.com/v3/document_image/707969ad-10a8-43a2-b0e3-790984a70843-3810853.jpg" alt="img">  </li>
</ul>
</li>
</ul>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><h3 id="基本数据类型内存占用"><a href="#基本数据类型内存占用" class="headerlink" title="基本数据类型内存占用"></a>基本数据类型内存占用</h3><p><img src="https://api2.mubu.com/v3/document_image/58764c05-e132-4867-ae7c-5b80af26c651-3810853.jpg" alt="img">  </p>
<h3 id="变量对象有额外开销"><a href="#变量，对象（有额外开销）" class="headerlink" title="变量，对象（有额外开销）"></a>变量，对象（有额外开销）</h3><p><img src="https://api2.mubu.com/v3/document_image/449ffe1b-09e2-42bd-b975-6967c38587cc-3810853.jpg" alt="img">  </p>
<h2 id="comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h2><h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><p>   <img src="https://api2.mubu.com/v3/document_image/84baff81-56ec-4001-aa58-b9c2895acfa9-3810853.jpg" alt="img">  </p>
<h3 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h3><p>   <img src="https://api2.mubu.com/v3/document_image/f7f6466e-4092-43c5-9d5f-dbdca9a1a156-3810853.jpg" alt="img">  </p>
<h3 id="把两个对象传进去比较"><a href="#把两个对象传进去比较" class="headerlink" title="把两个对象传进去比较"></a>把两个对象传进去比较</h3><p>   <img src="https://api2.mubu.com/v3/document_image/5248e8f4-0906-427e-ab55-7eac4035a5eb-3810853.jpg" alt="img">  </p>
<h2 id="冒泡算法"><a href="#冒泡算法" class="headerlink" title="冒泡算法"></a>冒泡算法</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul>
<li><p>排序原理</p>
<p><img src="https://api2.mubu.com/v3/document_image/70769319-dd04-4d4a-9b38-be3a145f13b0-3810853.jpg" alt="img">  </p>
</li>
</ul>
<h3 id="冒泡api"><a href="#冒泡API" class="headerlink" title="冒泡API"></a>冒泡API</h3><ul>
<li>API<ul>
<li>​    <img src="https://api2.mubu.com/v3/document_image/0fb14241-2e32-4ba8-acec-2a0aa32b3b49-3810853.jpg" alt="img">  </li>
</ul>
</li>
</ul>
<h3 id="api分析理解"><a href="#API分析理解" class="headerlink" title="API分析理解"></a>API分析理解</h3><ul>
<li><p>定位到最后一个元素，之前的元素全部进行两两比较，往后传送最大的，再与最后的元素通过j+1进行比较，大的一方持有最后一个位置。</p>
</li>
<li><p>第一层与第二层关系：j&lt;i</p>
</li>
<li><p>第二层的范围随着第一层逐渐减小</p>
</li>
<li><p>冒泡测试</p>
<p>​    <img src="https://api2.mubu.com/v3/document_image/c5431554-f4cb-4c17-846b-efd092b0747d-3810853.jpg" alt="img">  </p>
</li>
</ul>
<h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>  <img src="https://api2.mubu.com/v3/document_image/432ec498-91e5-4cb3-9665-b70a01205d00-3810853.jpg" alt="img">  </p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="原理"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p><img src="https://api2.mubu.com/v3/document_image/ad3d8976-dab2-4352-90f1-2f4f6f5eab93-3810853.jpg" alt="img">  </p>
<h3 id="选择api"><a href="#选择API" class="headerlink" title="选择API"></a>选择API</h3><p><img src="https://api2.mubu.com/v3/document_image/3fd5ece7-1db5-46eb-8026-ff8c501917c8-3810853.jpg" alt="img">  </p>
<h3 id="api分析理解"><a href="#API分析理解-1" class="headerlink" title="API分析理解"></a>API分析理解</h3><ul>
<li>定位到第一位，给第一位贴一个标签表示最小，从第二位开始进行相邻比较传递标签，让最后的到标签的元素与第一位交换位置。</li>
<li>//关系：j=i+1</li>
<li>第二层的起始位置随第一次往前推</li>
<li>//特殊：第一层可以只遍历到倒数第二个元素，</li>
<li>//注意：每一轮结束了才进行交换，所以要不exch放在内循环外面</li>
</ul>
<h3 id="时间复杂度"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><img src="https://api2.mubu.com/v3/document_image/0c1c222d-0de8-4840-9725-77997a29d967-3810853.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>黑马</category>
      </categories>
  </entry>
  <entry>
    <title>获取网络json数据</title>
    <url>/2021/06/03/Json/json/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final String TAG &#x3D; &quot;MSG&quot;;</span><br><span class="line">Handler handler&#x3D;new Handler();</span><br><span class="line">public void setMessageUrl(String myurl,int flag) &#123;</span><br><span class="line">    Thread thread &#x3D; new Thread(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            String result;</span><br><span class="line">            try &#123;</span><br><span class="line">                URL url &#x3D; new URL(myurl);</span><br><span class="line">                HttpURLConnection connection &#x3D; (HttpURLConnection) url.openConnection();</span><br><span class="line">                connection.setRequestMethod(&quot;GET&quot;);</span><br><span class="line">                int code &#x3D; connection.getResponseCode();</span><br><span class="line">                if (code &#x3D;&#x3D; 200) &#123;</span><br><span class="line">                    InputStream inputStream &#x3D; connection.getInputStream();</span><br><span class="line">                    ByteArrayOutputStream bos &#x3D; new ByteArrayOutputStream();</span><br><span class="line">                    int len &#x3D; -1;</span><br><span class="line">                    byte[] bytes &#x3D; new byte[1024];</span><br><span class="line">                    while ((len &#x3D; inputStream.read(bytes)) !&#x3D; -1) &#123;</span><br><span class="line">                        bos.write(bytes, 0, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    result &#x3D; new String(bos.toByteArray(), &quot;utf-8&quot;);</span><br><span class="line">                    Message msg&#x3D;new Message();</span><br><span class="line">                    Bundle bd&#x3D;new Bundle();</span><br><span class="line">                    bd.putString(&quot;result&quot;,result);</span><br><span class="line">                    msg.setData(bd);</span><br><span class="line">                    msg.what&#x3D;flag;</span><br><span class="line">                    handler.sendMessage(msg);</span><br><span class="line">                    Log.i(TAG, &quot;run: &quot;+result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public RootName getRoot(Message handlermsg)&#123;</span><br><span class="line">     String massage&#x3D;handlermsg.getData().getString(&quot;result&quot;);</span><br><span class="line">     Gson gson&#x3D;new Gson();</span><br><span class="line">     RootName rootName&#x3D;gson.fromJson(massage,RootName.class);</span><br><span class="line">     return rootName;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &#39;com.google.code.gson:gson:2.8.5&#39;</span><br></pre></td></tr></table></figure>

<p>HttpConnection连接api，获取输入流。先用inputStream输入流读入数据，再用ByteArrayOutputStream将数据读出。将读出的字节数组编程字符串使用</p>
]]></content>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Thymeleaf 没有返回html只返回字符串</title>
    <url>/2021/06/04/Thymeleaf/Thymeleaf%20%E6%B2%A1%E6%9C%89%E8%BF%94%E5%9B%9Ehtml%E5%8F%AA%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>在使用Thymeleaf的时候，@RequestMapping对应的函数没有返回html文件而是返回了这个函数对应的字符串返回值</p>
<p>解决办法：</p>
<p>删除这个函数前面的@Responsebody注解，这个注解会返回Mapping函数指定的返回类型、例如String。而不是将其解析为html文件</p>
<p>===================================================================</p>
<p>错误：不能返回页面，只返回字符串。</p>
<p>原因：在controller中使用了注解@RestController</p>
<p>修改：修改注解为@Controller</p>
<p>分析：</p>
<p>RestController = Controller + ResponseBody.加上RestController,返回的内容是你return中的内容，如果是return “Hello World”，页面显示的就是Hello World。加上Controller，返回的是return中对应的页面,比如return “hello”,页面的名称是hello。</p>
]]></content>
      <tags>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf中链接的写法</title>
    <url>/2021/06/08/Thymeleaf/thymeleaf%E4%B8%AD%E9%93%BE%E6%8E%A5%E7%9A%84%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a th:href&#x3D;&quot;@&#123;&#x2F;delete(id&#x3D;$&#123;student.getId()&#125;)&#125;&quot;&gt;删除&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestParam(&quot;id&quot;) int id</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>android套WebView</title>
    <url>/2021/06/27/android/android%E5%A5%97WebView/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 展示一个 WebView --&gt;</span><br><span class="line">&lt;WebView</span><br><span class="line">    android:id=<span class="string">&quot;@+id/webview&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">package com.example.webviewdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebViewClient;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected <span class="keyword">void</span> <span class="function"><span class="title">onCreate</span>(<span class="params">Bundle savedInstanceState</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.createWebView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建 WebView 实例 */</span></span><br><span class="line">    @SuppressLint(<span class="string">&quot;SetJavaScriptEnabled&quot;</span>)</span><br><span class="line">    private <span class="keyword">void</span> <span class="function"><span class="title">createWebView</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 WebView 实例并通过 id 绑定我们刚在布局中创建的 WebView 标签</span></span><br><span class="line">        <span class="comment">// 这里的 R.id.webview 就是 activity_main.xml 中的 WebView 标签的 id</span></span><br><span class="line">        final WebView webView = (WebView) findViewById(R.id.webview);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 WebView 允许执行 JavaScript 脚本</span></span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保跳转到另一个网页时仍然在当前 WebView 中显示</span></span><br><span class="line">        <span class="comment">// 而不是调用浏览器打开</span></span><br><span class="line">        webView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载指定网页</span></span><br><span class="line">        <span class="built_in">String</span> url = <span class="string">&quot;https://chenpipi.cn&quot;</span>;</span><br><span class="line">        webView.loadUrl(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 访问网络的权限 --&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置为全屏（隐藏状态栏）</span></span><br><span class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 WebView 的按键监听器，覆写监听器的 onKey 函数，对返回键作特殊处理</span></span><br><span class="line"><span class="comment">// 当 WebView 可以返回到上一个页面时回到上一个页面</span></span><br><span class="line">webView.setOnKeyListener(<span class="keyword">new</span> View.OnKeyListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean <span class="function"><span class="title">onKey</span>(<span class="params">View v, int keyCode, KeyEvent event</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; webView.canGoBack()) &#123;</span><br><span class="line">            webView.goBack();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol>
<li>重写当前 Activity 的 <code>onBackPressed</code> 函数：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">private WebView webView = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 WebView 实例时保存到 this.webView 中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 接管返回键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Override</span><br><span class="line">public <span class="keyword">void</span> <span class="function"><span class="title">onBackPressed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webView.canGoBack()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.webView.goBack();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onBackPressed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">    ...</span><br><span class="line">    android:usesCleartextTraffic=<span class="string">&quot;true&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>notification兼容</title>
    <url>/2021/06/19/android/notification%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW,Uri.parse(<span class="string">&quot;http://www.baidu.com&quot;</span>));</span><br><span class="line">PendingIntent pendingIntent = PendingIntent.getActivity(MainActivity.<span class="keyword">this</span>,<span class="number">0</span>,intent,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">NotificationManager manager = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;= <span class="number">26</span>) </span><br><span class="line"> &#123;</span><br><span class="line">               <span class="comment">//当sdk版本大于26</span></span><br><span class="line">   String id = <span class="string">&quot;channel_1&quot;</span>;</span><br><span class="line">   String description = <span class="string">&quot;143&quot;</span>;</span><br><span class="line">   <span class="keyword">int</span> importance = NotificationManager.IMPORTANCE_LOW;</span><br><span class="line">   NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(id, description, importance);</span><br><span class="line"><span class="comment">//                     channel.enableLights(true);</span></span><br><span class="line"><span class="comment">//                     channel.enableVibration(true);//</span></span><br><span class="line">   manager.createNotificationChannel(channel);</span><br><span class="line">   Notification notification = <span class="keyword">new</span> Notification.Builder(MainActivity.<span class="keyword">this</span>, id)</span><br><span class="line">                                    .setCategory(Notification.CATEGORY_MESSAGE)</span><br><span class="line">                                    .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                                    .setContentTitle(<span class="string">&quot;This is a content title&quot;</span>)</span><br><span class="line">                                    .setContentText(<span class="string">&quot;This is a content text&quot;</span>)</span><br><span class="line">                                    .setContentIntent(pendingIntent)</span><br><span class="line">                                    .setAutoCancel(<span class="keyword">true</span>)</span><br><span class="line">                                    .build();</span><br><span class="line">   manager.notify(<span class="number">1</span>, notification);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">            <span class="comment">//当sdk版本小于26</span></span><br><span class="line">    Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(MainActivity.<span class="keyword">this</span>)</span><br><span class="line">                                    .setContentTitle(<span class="string">&quot;This is content title&quot;</span>)</span><br><span class="line">                                    .setContentText(<span class="string">&quot;This is content text&quot;</span>)</span><br><span class="line">                                    .setContentIntent(pendingIntent)</span><br><span class="line">                                    .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                                    .build();</span><br><span class="line">    manager.notify(<span class="number">1</span>,notification);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>fragment实现底栏思路</title>
    <url>/2021/06/03/android/fragment%E5%AE%9E%E7%8E%B0%E5%BA%95%E6%A0%8F%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<ul>
<li><p>MVC设计模式</p>
<p>Model负责处理数据，并将处理好的数据交给Frament。Frament负责连接每个Frament布局以及控件，将收到的数据显示在控件上</p>
</li>
<li><p>navigation</p>
<p>navigation负责整合分开的fragment布局文件，并通过menu将每个frament布局与bottomNavigation结合在一起</p>
</li>
<li><p>NavigationUI</p>
<p> navigationUi将分散的fragment布局、以及底部按钮绑定到主页的主fragment中。AppBarConfiguration和NavController将会协助navigationUI分别对底部按钮和fragment布局进行绑定。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>多模块开发</title>
    <url>/2021/06/03/android/%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>1.在主模块添加该依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile project(&#39;:testlibrary&#39;)      &#x2F;&#x2F;testlibraray是模块儿名称</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在依赖模块修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apply plugin: &#39;com.android.library&#39;     &#x2F;&#x2F;改成libraray</span><br></pre></td></tr></table></figure>

<p>3.注释掉依赖模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;   applicationId &quot;cn.itcast.frameanimation&quot;</span><br></pre></td></tr></table></figure>

<p>4.注册调用的activity</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;activity   android:name&#x3D;&quot;cn.itcast.tweenanimation.BJActivity&quot;</span><br><span class="line">    android:label&#x3D;&quot;@string&#x2F;app_name&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>5.布局名称不能相同</p>
<p>6.3.AndroidManifest.xml文件</p>
<ul>
<li><p>主module 在application上加上tools:replace=”android:name,allowBackup,icon,theme,label”</p>
</li>
<li><p>同时在顶端加上xmlns:tools=”<a href="http://schemas.android.com/tools&quot;%EF%BC%9B%E4%B8%BB%E8%A6%81%E6%98%AF%E9%81%BF%E5%85%8D%E5%A4%9Amodule%E7%9A%84name,icon,theme%E7%AD%89%E5%86%B2%E7%AA%81">http://schemas.android.com/tools&quot;；主要是避免多module的name,icon,theme等冲突</a></p>
</li>
<li><p>次module把application下的android:name，android:icon，android:label删除，否则安装后，在桌面上会有多个图标；</p>
</li>
<li><p>次module去掉activity的主过滤器</p>
</li>
</ul>
<pre><code>　&lt;intent-filter&gt;
   　　　　 &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
  　　&lt;/intent-filter&gt;

```</code></pre>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>读取Asset文件中的json数据</title>
    <url>/2021/06/03/android/%E8%AF%BB%E5%8F%96Asset%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84json%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Context mContext, String fileName)</span> </span>&#123;  </span><br><span class="line">           <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">           StringBuilder sb = <span class="keyword">new</span> StringBuilder();  </span><br><span class="line">           AssetManager am = mContext.getAssets();  </span><br><span class="line">           <span class="keyword">try</span> &#123;  </span><br><span class="line">               BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(  </span><br><span class="line">                       am.open(fileName)));  </span><br><span class="line">               String next = <span class="string">&quot;&quot;</span>;  </span><br><span class="line">               <span class="keyword">while</span> (<span class="keyword">null</span> != (next = br.readLine())) &#123;  </span><br><span class="line">                   sb.append(next);  </span><br><span class="line">               &#125;  </span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">               <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">               e.printStackTrace();  </span><br><span class="line">               sb.delete(<span class="number">0</span>, sb.length());  </span><br><span class="line">           &#125;  </span><br><span class="line">           <span class="keyword">return</span> sb.toString().trim();  </span><br><span class="line">       &#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery中的$.load详解</title>
    <url>/2021/02/13/ajax/JQuery%E4%B8%AD%E7%9A%84$.load%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h1><h2 id="1载入html文档"><a href="#1-载入HTML文档" class="headerlink" title="1.载入HTML文档"></a>1.载入HTML文档</h2><p>load()方法是jQuery中最为简单和常用的Ajax方法，能载入远程HTML代码并插入DOM中。<br>它的结构为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load(url,data(可选),callback(可选))</span><br></pre></td></tr></table></figure>
<p>2.筛选载入的HTML文档<br>需要加载test.html页面中class为”para”的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#resText&quot;).load(&quot;test.html  .para&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="2传递方法"><a href="#2-传递方法" class="headerlink" title="2.传递方法"></a>2.传递方法</h2><p>load()方法的传递方式根据参数data来自动指定。如果没有参数传递，则采用GET方式传递；反之，则会自动转换为POST方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;无参数传递，则是GET方式</span><br><span class="line">$(&#39;#resText&#39;).load(&#39;test.php&#39;,function()&#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;有参数传递，则是POST方式</span><br><span class="line">$(&#39;#resText&#39;).load(&#39;test.php&#39;,&#123;name:&#39;rain&#39;,age:&#39;22&#39;&#125;，function()&#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="4回调函数"><a href="#4-回调函数" class="headerlink" title="4.回调函数"></a>4.回调函数</h2><p>对于必须在加载完成后才能继续的操作，load()方法提供了回调函数(callback)，该函数有3个参数，分别代表请求返回的内容、请求状态和XMLHttpRequest对象，jQuery代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#resText&quot;).load(&quot;test.html&quot;,function (responseText, textStatus, XMLHttpRequest)&#123;         </span><br><span class="line">        alert(responseText);         &#x2F;&#x2F;请求返回的内容</span><br><span class="line">        alert(textStatus);          &#x2F;&#x2F;请求状态：success，error</span><br><span class="line">        alert(XMLHttpRequest);     &#x2F;&#x2F;XMLHttpRequest对象</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在load()方法中，无论Ajax请求是否成功，只要当请求完成(complete)后，回调函数(callback)就被触发。</p>
<h2 id="5传递多个参数"><a href="#5-传递多个参数" class="headerlink" title="5.传递多个参数"></a>5.传递多个参数</h2><p>直接通过request分别获取即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#resText&#39;).load(&#39;test.php&#39;,&#123;name:&#39;rain&#39;,age:&#39;22&#39;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="load方法通常用来从web服务器上获取静态的数据文件然后这并不能体现ajax的全部价值-在项目中如果需要传递一些参数给服务器中的页面那么可以使用get或者post或者ajax方法"><a href="#load-方法通常用来从Web服务器上获取静态的数据文件，然后这并不能体现Ajax的全部价值。在项目中，如果需要传递一些参数给服务器中的页面，那么可以使用-get-或者-post-或者-ajax-方法。" class="headerlink" title="load()方法通常用来从Web服务器上获取静态的数据文件，然后这并不能体现Ajax的全部价值。在项目中，如果需要传递一些参数给服务器中的页面，那么可以使用$.get()或者$.post()或者$.ajax()方法。"></a>load()方法通常用来从Web服务器上获取静态的数据文件，然后这并不能体现Ajax的全部价值。在项目中，如果需要传递一些参数给服务器中的页面，那么可以使用$.get()或者$.post()或者$.ajax()方法。</h3>]]></content>
      <tags>
        <tag>jquery</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax详解</title>
    <url>/2021/02/15/ajax/ajax%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="1url"><a href="#1-url" class="headerlink" title="1.url"></a>1.url</h1><p>要求为String类型的参数，（默认为当前页地址）发送请求的地址。</p>
<h1 id="2type"><a href="#2-type" class="headerlink" title="2.type"></a>2.type</h1><p>要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。</p>
<h1 id="3timeout"><a href="#3-timeout" class="headerlink" title="3.timeout"></a>3.timeout</h1><p>要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。</p>
<h1 id="4async"><a href="#4-async" class="headerlink" title="4.async"></a>4.async</h1><p>要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。</p>
<h1 id="5cache"><a href="#5-cache" class="headerlink" title="5.cache"></a>5.cache</h1><p>要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p>
<h1 id="6date"><a href="#6-date" class="headerlink" title="6.date"></a>6.date</h1><p>要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看　　processData选项。对象必须为key/value格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2。</p>
<h1 id="7datetype"><a href="#7-datetype" class="headerlink" title="7.datetype"></a>7.datetype</h1><p>要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：<br>xml：返回XML文档，可用JQuery处理。<br>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>json：返回JSON数据。<br>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串。</p>
<h1 id="8beforesend"><a href="#8-beforeSend" class="headerlink" title="8.beforeSend"></a>8.beforeSend</h1><p>要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function(XMLHttpRequest)&#123;</span><br><span class="line">           this;   &#x2F;&#x2F;调用本次ajax请求时传递的options参数</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h1 id="9compelete"><a href="#9-compelete" class="headerlink" title="9.compelete"></a>9.compelete</h1><p>要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function(XMLHttpRequest, textStatus)&#123;</span><br><span class="line">         this;    &#x2F;&#x2F;调用本次ajax请求时传递的options参数</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h1 id="10success"><a href="#10-success" class="headerlink" title="10.success"></a>10.success</h1><p>要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。<br>         (1)由服务器返回，并根据dataType参数进行处理后的数据。<br>         (2)描述状态的字符串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function(data, textStatus)&#123;</span><br><span class="line">       &#x2F;&#x2F;data可能是xmlDoc、jsonObj、html、text等等</span><br><span class="line">       this;  &#x2F;&#x2F;调用本次ajax请求时传递的options参数</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="11error"><a href="#11-error" class="headerlink" title="11.error"></a>11.error</h1><p>要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function(XMLHttpRequest, textStatus, errorThrown)&#123;</span><br><span class="line">   &#x2F;&#x2F;通常情况下textStatus和errorThrown只有其中一个包含信息</span><br><span class="line">   this;   &#x2F;&#x2F;调用本次ajax请求时传递的options参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="12contenttype"><a href="#12-contentType" class="headerlink" title="12.contentType"></a>12.contentType</h1><p>要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”。该默认值适合大多数应用场合。</p>
<h1 id="13datefilter"><a href="#13-dateFilter" class="headerlink" title="13.dateFilter"></a>13.dateFilter</h1><p>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function(data, type)&#123;</span><br><span class="line">           &#x2F;&#x2F;返回处理后的数据</span><br><span class="line">           return data;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h1 id="14datafilter"><a href="#14-dataFilter" class="headerlink" title="14.dataFilter"></a>14.dataFilter</h1><p>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function(data, type)&#123;</span><br><span class="line">    &#x2F;&#x2F;返回处理后的数据</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="15global"><a href="#15-global" class="headerlink" title="15.global"></a>15.global</h1><p>要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。</p>
<h1 id="16ifmodified"><a href="#16-ifModified" class="headerlink" title="16.ifModified"></a>16.ifModified</h1><p>要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。</p>
<h1 id="17jsonp"><a href="#17-jsonp" class="headerlink" title="17.jsonp"></a>17.jsonp</h1><p>要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在”callback=?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器。</p>
<h1 id="18username"><a href="#18-username" class="headerlink" title="18.username"></a>18.username</h1><p>要求为String类型的参数，用于响应HTTP访问认证请求的用户名。</p>
<h1 id="19password"><a href="#19-password" class="headerlink" title="19.password"></a>19.password</h1><p>要求为String类型的参数，用于响应HTTP访问认证请求的密码。</p>
<h1 id="20processdata"><a href="#20-processData" class="headerlink" title="20.processData"></a>20.processData</h1><p>要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。<br>21.scriptCharset</p>
<p>要求为String类型的参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。</p>
<p>案例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function user() &#123;</span><br><span class="line">	$.ajax(&#123;</span><br><span class="line">		url:&quot;change.do&quot;,</span><br><span class="line">		type:&quot;post&quot;,</span><br><span class="line">		dateType:&quot;json&quot;,</span><br><span class="line">	    success:function(data)&#123;</span><br><span class="line">	    	var dataObj&#x3D;eval(&quot;(&quot;+data+&quot;)&quot;);</span><br><span class="line">	        $(&quot;#tb1&quot;).empty();</span><br><span class="line">	    	for(i&#x3D;0;i&lt;dataObj.length;i++)&#123;</span><br><span class="line">	           var s&#x3D;dataObj[i];</span><br><span class="line">	           $(&quot;#tb1&quot;).append(</span><br><span class="line">	        		   &quot;&lt;tr&gt;&lt;td&gt;&quot;+s.name</span><br><span class="line">	        		   +&quot;&lt;&#x2F;td&gt;&lt;td&gt;&quot;+s.pass</span><br><span class="line">	        		   +&quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&quot;</span><br><span class="line">	        		   );</span><br><span class="line">	    	&#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>eval解析JSON中的注意点</title>
    <url>/2021/02/16/ajax/eval%E8%A7%A3%E6%9E%90JSON%E4%B8%AD%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    <content><![CDATA[<p>在JS中将JSON的字符串解析成JSON数据格式，一般有两种方式：</p>
<ol>
<li><p>一种为使用eval()函数。</p>
</li>
<li><p>使用Function对象来进行返回解析。</p>
</li>
</ol>
<p>使用eval函数来解析，并且使用jquery的each方法来遍历</p>
<p>用jquery解析JSON数据的方法,作为jquery异步请求的传输对象，jquery请求后返回的结果是json对象,这里考虑的都是服务器返回JSON形式的字符串的形式，对于利用JSONObject等插件封装的JSON对象，与此亦是大同小异，这里不再做说明。</p>
]]></content>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟器乱码</title>
    <url>/2021/06/03/androidbug/%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">即添加一句：compileOptions.encoding &#x3D; &quot;GBK&quot;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>androidbug</tag>
      </tags>
  </entry>
  <entry>
    <title>主题报错</title>
    <url>/2021/06/03/androidbug/%E4%B8%BB%E9%A2%98%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: You need to use a Theme.AppCompat theme (or descendant) with this activity.</span><br></pre></td></tr></table></figure>

<p>在创建的activity时，如果不用继承AppCompatActivity的话，就直接继承Activity。</p>
]]></content>
      <tags>
        <tag>androidbug</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle下载速度慢解决方法</title>
    <url>/2021/03/16/androidstudio/Gradle%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>1.在软件里点开工程文件下的 build.gradle</p>
<p>2..在 buildscript 和 allprojects 的 repositories 中分别注释掉 jcenter()</p>
<p>3.在 buildscript 和 allprojects 的 repositories 分别添加：<code>maven&#123;url &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39;&#125;</code></p>
<p>4.再在 buildscript 的 repositories 添加：<code>maven&#123;url &quot;https://jitpack.io&quot;&#125;</code></p>
<p>最终图片：</p>
<p><img src="https://img2018.cnblogs.com/blog/1577027/201901/1577027-20190111193149745-1197845339.png" alt="img"></p>
<p>实际效果证明：下载速度能对得起自己的网速了！</p>
<p>如果还是下载慢，建议换个上网的方式，比如手机开热点，还是不行，就用不同运营商的手机开热点，至于为什么，等真的还是慢时自己试试就知道了。</p>
]]></content>
      <tags>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>获取网络数据时报错</title>
    <url>/2021/06/03/androidbug/%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E6%97%B6%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.io.IOException: Cleartext HTTP traf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android:usesCleartextTraffic&#x3D;&quot;true&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>androidbug</tag>
      </tags>
  </entry>
  <entry>
    <title>androidstudio导入项目</title>
    <url>/2021/05/01/androidstudio/androidstudio%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="导入androidstudio项目"><a href="#导入androidstudio项目" class="headerlink" title="导入androidstudio项目"></a>导入androidstudio项目</h3><ul>
<li><p>复制app文件</p>
</li>
<li><p>在builder.gladle中修改sdk版本，target版本和compile版本得保持一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">targetSdkVersion 28</span><br><span class="line">compileSdkVersion 28</span><br><span class="line">compile &#39;com.android.support:appcompat-v7:28.0.0&#39;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="导入eclipse项目"><a href="#导入eclipse项目" class="headerlink" title="导入eclipse项目"></a>导入eclipse项目</h3><ul>
<li>将eclipse项目以model形式导入</li>
<li>调整builder.gradle，将创建好的gradle中的复制过去即可。</li>
</ul>
]]></content>
      <tags>
        <tag>androidstudio</tag>
      </tags>
  </entry>
  <entry>
    <title>androidUI圆角背景</title>
    <url>/2021/06/03/androidui/androidUI%E5%9C%86%E8%A7%92%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;layer-list</span><br><span class="line">    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class="line">    &lt;item&gt;</span><br><span class="line">        &lt;shape</span><br><span class="line">            xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">            android:shape&#x3D;&quot;rectangle&quot;&gt;</span><br><span class="line">            &lt;solid</span><br><span class="line">                android:color&#x3D;&quot;#ffffff&quot;&#x2F;&gt;</span><br><span class="line">            &lt;corners</span><br><span class="line">                android:radius&#x3D;&quot;20dip&quot;</span><br><span class="line">                &#x2F;&gt;</span><br><span class="line">            &lt;stroke</span><br><span class="line">                android:width&#x3D;&quot;2px&quot;</span><br><span class="line">                &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;shape&gt;</span><br><span class="line">    &lt;&#x2F;item&gt;</span><br><span class="line">&lt;&#x2F;layer-list&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>androidui</tag>
      </tags>
  </entry>
  <entry>
    <title>接口</title>
    <url>/2021/06/03/api/%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>天气预报</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;t.weather.itboy.net&#x2F;api&#x2F;weather&#x2F;city&#x2F;101280101</span><br></pre></td></tr></table></figure>

<p>有道翻译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;fanyi.youdao.com&#x2F;translate?&amp;doctype&#x3D;json&amp;type&#x3D;AUTO&amp;i&#x3D;计算</span><br></pre></td></tr></table></figure>

<p>影视</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;jx.444662.cn&#x2F;m3u8&#x2F;?url&#x3D;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap引入</title>
    <url>/2021/06/03/boogstrap/bootstrap%E5%BC%95%E5%85%A5/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;4.3.1&#x2F;css&#x2F;bootstrap.min.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;jquery&#x2F;3.2.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;popper.js&#x2F;1.15.0&#x2F;umd&#x2F;popper.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;4.3.1&#x2F;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>druid配置</title>
    <url>/2021/06/09/druid/druid%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span></span><br><span class="line"><span class="comment">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span></span><br><span class="line"><span class="comment">       @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)：作用就是将 全局配置文件中</span></span><br><span class="line"><span class="comment">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置 Druid 监控管理后台的Servlet；</span></span><br><span class="line"><span class="comment">//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet </span></span><br><span class="line">    <span class="comment">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;root&quot;</span>); <span class="comment">//后台管理界面的登录账号</span></span><br><span class="line">    initParams.put(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;admin&quot;</span>); <span class="comment">//后台管理界面的登录密码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//后台允许谁可以访问</span></span><br><span class="line">    <span class="comment">//initParams.put(&quot;allow&quot;, &quot;localhost&quot;)：表示只有本机可以访问</span></span><br><span class="line">    <span class="comment">//initParams.put(&quot;allow&quot;, &quot;&quot;)：为空或者为null时，表示允许所有访问</span></span><br><span class="line">    initParams.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//deny：Druid 后台拒绝谁访问</span></span><br><span class="line">    <span class="comment">//initParams.put(&quot;kuangshen&quot;, &quot;192.168.1.20&quot;);表示禁止此ip访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始化参数</span></span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置 Druid 监控 之  web 监控的 filter</span></span><br><span class="line"><span class="comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.css,/druid/*,/jdbc/*&quot;</span>);</span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&quot;/*&quot; 表示过滤所有请求</span></span><br><span class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>druid</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo个性化设置</title>
    <url>/2020/11/27/hexo/hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><!-- toc -->

<ul>
<li><a href="#%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98">更换主题</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E7%AB%99%E7%82%B9%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF">配置站点基本信息</a></li>
<li><a href="#%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF%E8%AE%BE%E7%BD%AE">动态背景设置</a></li>
<li><a href="#%E5%A2%9E%E5%88%A0%E4%BE%A7%E6%A0%8F%E6%9D%A1%E7%9B%AE">增删侧栏条目</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AEtoc%E7%9B%AE%E5%BD%95">设置toc目录</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD">设置搜索功能</a></li>
<li><a href="#%E5%BA%95%E9%83%A8%E9%9A%90%E8%97%8F%E7%94%B1hexo%E5%BC%BA%E5%8A%9B%E9%A9%B1%E5%8A%A8-%E4%B8%BB%E9%A2%98nextmist">底部隐藏由Hexo强力驱动、主题–NexT.Mist</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87-favicon">设置网站图片 Favicon</a></li>
<li><a href="#%E5%8D%9A%E5%AE%A2%E7%BD%AE%E9%A1%B6%E8%AE%BE%E7%BD%AE">博客置顶设置</a></li>
<li><a href="#%E6%96%87%E7%AB%A0%E4%BB%A3%E7%A0%81%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE">文章代码主题设置</a></li>
<li><a href="#%E7%BD%91%E7%AB%99%E5%BA%95%E9%83%A8%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E8%AE%BE%E7%BD%AE">网站底部字数统计设置</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E5%A4%B4%E5%83%8F">设置头像</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E5%A4%B4%E5%83%8F%E5%9C%86%E8%A7%92%E5%B9%B6%E6%97%8B%E8%BD%AC%E6%89%93%E5%BC%80">设置头像圆角并旋转打开</a></li>
<li><a href="#%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%88%97%E8%A1%A8">添加分类列表</a></li>
<li><a href="#%E5%90%8C%E4%B8%80%E4%B8%AA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%A4%9A%E4%B8%AAtags">同一个文章添加多个tags</a></li>
<li><a href="#%E5%A4%96%E9%93%BE%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E8%AE%BE%E7%BD%AE">外链网易云音乐设置</a></li>
<li><a href="#%E7%9C%8B%E6%9D%BF%E5%A8%98%E8%AE%BE%E7%BD%AE">看板娘设置</a></li>
</ul>
<!-- tocstop -->

<hr>
<a id="more"></a>

<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><ul>
<li><p>克隆主题仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure></li>
<li><p>配置站点_config.yum文件,修改theme为我们想要的主题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置主题_config.yum文件。选择样式取掉前面的#号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure></li>
<li><p>hexo使用theme如果出现出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“ &#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro&#x2F;post.swig‘ as post_template %&#125;“</span><br></pre></td></tr></table></figure>
<p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>
<!-- more -->
<h2 id="配置站点基本信息"><a href="#配置站点基本信息" class="headerlink" title="配置站点基本信息"></a>配置站点基本信息</h2><p>在站点配置文件_config.yml修改基本的站点信息，依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: Mark&#39;s Blog</span><br><span class="line">subtitle: I love to travel, but hate to arrive.</span><br><span class="line">description: </span><br><span class="line">keywords:</span><br><span class="line">author: Akram Amat</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="动态背景设置"><a href="#动态背景设置" class="headerlink" title="动态背景设置"></a>动态背景设置</h2><p>Next主题自带有动态的背景效果，修改主题配置文件中的canvas_nest: false为canvas_nest: true即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: true</span><br><span class="line"></span><br><span class="line"># three_waves</span><br><span class="line">three_waves: false</span><br></pre></td></tr></table></figure>
<h2 id="增删侧栏条目"><a href="#增删侧栏条目" class="headerlink" title="增删侧栏条目"></a>增删侧栏条目</h2></li>
<li><p>创建菜单文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;你所要增加的菜单项名称（要和你在menu中的填写要匹配）&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>编辑菜单文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2020-11-27 10:23:31</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>修改主题配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">#home: &#x2F; || home</span><br><span class="line">#about: &#x2F;about&#x2F; || user</span><br><span class="line">tags: &#x2F;tags</span><br></pre></td></tr></table></figure>
<h2 id="设置toc目录"><a href="#设置toc目录" class="headerlink" title="设置toc目录"></a>设置toc目录</h2></li>
<li><p>安装toc插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-toc --save</span><br></pre></td></tr></table></figure></li>
<li><p>配置站点配置文件,在文件末尾添加。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toc:</span><br><span class="line">  maxDepth: 4         &#x2F;&#x2F;深度</span><br><span class="line">  slugify: false     &#x2F;&#x2F;防止中文链接被转义无法跳转</span><br></pre></td></tr></table></figure></li>
<li><p>在markdown中使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure>
<h2 id="设置搜索功能"><a href="#设置搜索功能" class="headerlink" title="设置搜索功能"></a>设置搜索功能</h2></li>
<li><p>安装 hexo-generator-search</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>安装 hexo-generator-searchdb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在项目根目录下的 _config.yml 配置文件的文末添加下面这段代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编辑主题文件夹的 _config.yml 配置文件，设置 Local searchenable 为 ture。重启服务即可！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<h2 id="底部隐藏由hexo强力驱动-主题nextmist"><a href="#底部隐藏由Hexo强力驱动、主题–NexT-Mist" class="headerlink" title="底部隐藏由Hexo强力驱动、主题–NexT.Mist"></a>底部隐藏由Hexo强力驱动、主题–NexT.Mist</h2></li>
<li><p>在主题文件夹下，打开 layout/_partials/footer.swig 文件，注释掉相关代码如下所示，位置是文末。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">&#123;% if theme.footer.powered %&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;powered-by&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __(&#39;footer.powered&#39;, &#39;&lt;a class&#x3D;&quot;theme-link&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;hexo.io&quot;&gt;Hexo&lt;&#x2F;a&gt;&#39;) &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.powered and theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;theme-info&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __(&#39;footer.theme&#39;) &#125;&#125; &amp;mdash; &#123;#</span><br><span class="line">  #&#125;&lt;a class&#x3D;&quot;theme-link&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&quot;&gt;&#123;#</span><br><span class="line">    #&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span><br><span class="line">  #&#125;&lt;&#x2F;a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; theme.version &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.custom_text %&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;footer-custom&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; theme.footer.custom_text &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>
<h2 id="设置网站图片-favicon"><a href="#设置网站图片-Favicon" class="headerlink" title="设置网站图片 Favicon"></a>设置网站图片 Favicon</h2></li>
<li><p>在 阿里巴巴矢量图标库 中找到自己的喜欢的图标，下载下来，覆盖掉主题文件夹下的 source/images 目录里面的三张图片即可。</p>
</li>
</ul>
<h2 id="博客置顶设置"><a href="#博客置顶设置" class="headerlink" title="博客置顶设置"></a>博客置顶设置</h2><ul>
<li>安装插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure></li>
<li>然后在需要置顶的文章的 Front-matter 中加上 top 即可，数值越大表示等级越高，越靠前显示。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: this is my first blog</span><br><span class="line">date: 2019-04-14</span><br><span class="line">top: 100</span><br></pre></td></tr></table></figure></li>
<li>在主题文件夹中打开 layout/_macro/post.swig 文件，定位到 post-header 标签下，把下面的代码添加进去即可。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;font color&#x3D;7D26CD&gt;置顶&lt;&#x2F;font&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文章代码主题设置"><a href="#文章代码主题设置" class="headerlink" title="文章代码主题设置"></a>文章代码主题设置</h2></li>
<li>NexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties。</li>
<li>在主题文件夹的 _config.yml 配置文件中，定位到 highlight_theme，根据需求修改相应的值即可。</li>
</ul>
<h2 id="网站底部字数统计设置"><a href="#网站底部字数统计设置" class="headerlink" title="网站底部字数统计设置"></a>网站底部字数统计设置</h2><ul>
<li>在项目根目录下安装 hexo 插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></li>
<li>打开主题文件夹下的 layout/_partials/footer.swig 文件，在文末添加上下面这段代码。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;powered-by&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2></li>
<li>配置主题_config.yum文件,替换相应文件下的avatar.gif文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar: &#x2F;images&#x2F;avatar.gif</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="设置头像圆角并旋转打开"><a href="#设置头像圆角并旋转打开" class="headerlink" title="设置头像圆角并旋转打开"></a>设置头像圆角并旋转打开</h2><ul>
<li>打开主题文件夹的 source\css_common\components\sidebar 目录下的 sidebar-author.styl 文件，然后把下面的代码添加进去即可。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  &#x2F;* 头像圆形 *&#x2F;</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line">  &#x2F;* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*&#x2F;</span><br><span class="line"> </span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">img:hover &#123;</span><br><span class="line">  &#x2F;* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*&#x2F;</span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* Z 轴旋转动画 *&#x2F;</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="添加分类列表"><a href="#添加分类列表" class="headerlink" title="添加分类列表"></a>添加分类列表</h2></li>
<li>在根目录新建categories page<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></li>
<li>打开 categories 文件夹中的 index.md 文件，添加 type 字段，设置为 “categories”。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2020-11-27 23:44:12</span><br><span class="line">type: categories</span><br></pre></td></tr></table></figure></li>
<li>接着到主题文件夹下的 _config.yml 配置文件下，找到 menu 模块，把 categories 的注释给去掉。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  #home: &#x2F; || home</span><br><span class="line">  #about: &#x2F;about&#x2F; || user</span><br><span class="line">  tags: &#x2F;tags</span><br><span class="line">  categories: &#x2F;categories</span><br></pre></td></tr></table></figure></li>
<li>可能会遇见的问题<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cannot get myblog&#x2F;categories&#x2F;20%</span><br></pre></td></tr></table></figure>
原因：在配置主题_config.yum文件时，categories后面的部分格式有问题，只能有一个空格，格式是非常严谨的。</li>
</ul>
<h2 id="同一个文章添加多个tags"><a href="#同一个文章添加多个tags" class="headerlink" title="同一个文章添加多个tags"></a>同一个文章添加多个tags</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags: [hexo,markdown]</span><br></pre></td></tr></table></figure>
<h2 id="外链网易云音乐设置"><a href="#外链网易云音乐设置" class="headerlink" title="外链网易云音乐设置"></a>外链网易云音乐设置</h2><ul>
<li>打开网易云，登录自己的账号，选择自己喜欢的一首歌，然后点击“生成外链播放器”</li>
<li>根据自己的需求设置音乐的样式，然后把代码复制下来。</li>
<li>打开主题文件夹下的 layout/_macro/sidebar.swig 文件，自己找个合适的位置，把刚刚复制的代码放进去。我放的位置如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class="line">            &#123;% set tagsPageQuery &#x3D; site.pages.find(&#123;type: &#39;tags&#39;&#125;, &#123;lean: true&#125;) %&#125;</span><br><span class="line">            &#123;% set hasTagsPage &#x3D; tagsPageQuery.length &gt; 0 %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;site-state-item site-state-tags&quot;&gt;</span><br><span class="line">              &#123;% if hasTagsPage %&#125;&lt;a href&#x3D;&quot;&#123;&#123; url_for(tagsPageQuery[0].path) &#125;&#125;&quot;&gt;&#123;% endif %&#125;</span><br><span class="line">                &lt;span class&#x3D;&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&#39;state.tags&#39;) &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">              &#123;% if hasTagsPage %&#125;&lt;&#x2F;a&gt;&#123;% endif %&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;nav&gt;</span><br><span class="line">        &lt;iframe frameborder&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; marginwidth&#x3D;&quot;0&quot; marginheight&#x3D;&quot;0&quot; width&#x3D;330 height&#x3D;86 src&#x3D;&quot;&#x2F;&#x2F;music.163.com&#x2F;outchain&#x2F;player?type&#x3D;2&amp;id&#x3D;26418207&amp;auto&#x3D;1&amp;height&#x3D;66&quot;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure>
<h2 id="看板娘设置"><a href="#看板娘设置" class="headerlink" title="看板娘设置"></a>看板娘设置</h2></li>
<li>下载插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li>
<li>选择萌宠或看板娘<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru&#x2F;01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru&#x2F;02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>然后在站点配置文件中加入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko  #选择哪种模型</span><br><span class="line">  display: #放置位置和大小</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: false #是否在手机端显示</span><br></pre></td></tr></table></figure></li>
<li>下载对应模型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-wanko</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo同时关联gitee和github</title>
    <url>/2020/11/29/hexo/hexo%E5%90%8C%E6%97%B6%E5%85%B3%E8%81%94gitee%E5%92%8Cgithub/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repo: </span><br><span class="line">       gitee: https:&#x2F;&#x2F;gitee.com&#x2F;akram98&#x2F;myblog.git</span><br><span class="line">       github: git@github.com:mark9812&#x2F;mark.github.io.git</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>在hoxe中使用markdown</title>
    <url>/2020/11/27/hexo/%E5%9C%A8hoxe%E4%B8%AD%E4%BD%BF%E7%94%A8markdown/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><!-- toc -->

<ul>
<li><a href="#toc%E7%9A%84%E4%BD%BF%E7%94%A8">toc的使用</a></li>
<li><a href="#%E4%BD%BF%E6%96%87%E5%AD%97%E7%B2%97%E4%BD%93%E6%88%96%E6%96%9C%E4%BD%93">使文字粗体或斜体</a></li>
<li><a href="#%E6%96%87%E6%9C%AC%E5%AF%B9%E9%BD%90">文本对齐</a></li>
<li><a href="#%E6%96%87%E6%9C%AC%E6%8A%98%E5%8F%A0">文本折叠</a></li>
</ul>
<!-- tocstop -->

<hr>
<a id="more"></a>

<h2 id="toc的使用"><a href="#toc的使用" class="headerlink" title="toc的使用"></a>toc的使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure>
<h2 id="使文字粗体或斜体"><a href="#使文字粗体或斜体" class="headerlink" title="使文字粗体或斜体"></a>使文字粗体或斜体</h2><p>使用粗体或斜体时，要保证两端的” _ “或者” * “离两边的文字之间有一个空格 </p>
<h2 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h2><p>在一个模块儿中间 <strong>空行</strong> 可能会导致上下文不对齐</p>
<h2 id="文本折叠"><a href="#文本折叠" class="headerlink" title="文本折叠"></a>文本折叠</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>js获取session中保存的对象值（jquery）</title>
    <url>/2021/02/13/jquery/js%E8%8E%B7%E5%8F%96session%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%80%BC%EF%BC%88jquery%EF%BC%89/</url>
    <content><![CDATA[<p>1.需要在js中获取到存储在session中的值，session中存储的可能是一个字符串也可能是一个对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;js&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">        &#x2F;&#x2F;session中存储的是一个对象user,内有属性name和password。</span><br><span class="line">		var username &#x3D; &#39;$&#123;user.name&#125;&#39;;</span><br><span class="line">		alert(username);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>2.如果session中存储的是一个字符串，那么如下代码就可以获取到正确的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;js&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">        &#x2F;&#x2F;session中存储的是一个字符串username。</span><br><span class="line">		var username &#x3D; &#39;$&#123;username&#125;&#39;;</span><br><span class="line">		alert(username);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建hexo个人博客</title>
    <url>/2020/11/26/hexo/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><!-- toc -->

<ul>
<li><a href="#%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E9%93%BE%E6%8E%A5%E4%BB%93%E5%BA%93">通过密钥链接仓库</a></li>
<li><a href="#%E5%AE%89%E8%A3%85nodejs">安装node.js</a></li>
<li><a href="#%E6%9E%84%E5%BB%BAmyblog%E6%96%87%E4%BB%B6">构建myBlog文件</a><ul>
<li><a href="#%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9">创建文件夹</a></li>
<li><a href="#%E6%89%93%E5%BC%80powershell">打开PowerShell</a><ul>
<li><a href="#__%E5%8F%AF%E8%83%BD%E9%81%87%E8%A7%81%E9%97%AE%E9%A2%98__"><strong>可能遇见问题</strong></a></li>
</ul>
</li>
<li><a href="#%E6%B5%8B%E8%AF%95">测试</a><ul>
<li><a href="#__%E5%B8%B8%E7%94%A8%E7%9A%84hexo-%E5%91%BD%E4%BB%A4__"><strong>常用的Hexo 命令</strong></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1">修改配置文件部署服务</a><ul>
<li><a href="#%E6%89%93%E5%BC%80blog%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E7%9A%84_configyum%E6%96%87%E4%BB%B6%E5%9C%A8%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E4%BB%A5%E4%B8%8B%E5%86%85%E5%AE%B9">打开blog文件夹中的_config.yum文件，在最后修改以下内容</a></li>
<li><a href="#%E5%AE%89%E8%A3%85git%E9%83%A8%E7%BD%B2%E6%8F%92%E4%BB%B6">安装git部署插件</a></li>
<li><a href="#%E5%90%AF%E5%8A%A8%E7%A0%81%E4%BA%91%E7%9A%84pakage%E6%9C%8D%E5%8A%A1%E5%8A%A0%E8%BD%BD%E9%A1%B5%E9%9D%A2">启动码云的pakage服务，加载页面</a></li>
</ul>
</li>
<li><a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a></li>
</ul>
<!-- tocstop -->

<hr>
<a id="more"></a>

<h2 id="通过密钥链接仓库"><a href="#通过密钥链接仓库" class="headerlink" title="通过密钥链接仓库"></a>通过密钥链接仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>生成的公钥在user/.ssh/id_rsa.pub文件中</p>
<h2 id="安装nodejs"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><a href="https://link.zhihu.com/?target=https://nodejs.org/en/download/">Download | Node.js</a><br> 安装完添加环境变量</p>
<h2 id="构建myblog文件"><a href="#构建myBlog文件" class="headerlink" title="构建myBlog文件"></a>构建myBlog文件</h2><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><h3 id="打开powershell"><a href="#打开PowerShell" class="headerlink" title="打开PowerShell"></a>打开PowerShell</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>
<h4 id="可能遇见问题"><a href="#可能遇见问题" class="headerlink" title="可能遇见问题"></a><strong>可能遇见问题</strong></h4><p>powershell中不能执行脚本，提示‘because running scripts is disabled on this system’<br><strong>原因</strong><br>powershell中默认的execution policy 是restricted，使用Get-ExecutionPolicy查看<br><strong>解决方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>init之后会产生blog文件夹，进入blog文件夹中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>完成后，打开浏览器输入地址：localhost:4000</p>
<!-- more -->
<h4 id="常用的hexo-命令"><a href="#常用的Hexo-命令" class="headerlink" title="常用的Hexo 命令"></a><strong>常用的Hexo 命令</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line">命令简写</span><br><span class="line">hexo n &quot;我的博客&quot; &#x3D;&#x3D; hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate #生成</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server #启动服务预览</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy #部署</span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure>

<p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p>
<h2 id="修改配置文件部署服务"><a href="#修改配置文件部署服务" class="headerlink" title="修改配置文件部署服务"></a>修改配置文件部署服务</h2><h3 id="打开blog文件夹中的_configyum文件在最后修改以下内容"><a href="#打开blog文件夹中的-config-yum文件，在最后修改以下内容" class="headerlink" title="打开blog文件夹中的_config.yum文件，在最后修改以下内容"></a>打开blog文件夹中的_config.yum文件，在最后修改以下内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repo: https:&#x2F;&#x2F;gitee.com&#x2F;username&#x2F;myblog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>再修改#URL标注下的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;username.gitee.io&#x2F;myblog</span><br><span class="line">root: &#x2F;myblog</span><br></pre></td></tr></table></figure>
<p>如果不修改url和root内容，可能会导致部署到服务器后无法加载样式<br>(上述usrename代表gitee账号的名称)</p>
<h3 id="安装git部署插件"><a href="#安装git部署插件" class="headerlink" title="安装git部署插件"></a>安装git部署插件</h3>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>安装完成后，接连输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h3 id="启动码云的pakage服务加载页面"><a href="#启动码云的pakage服务，加载页面" class="headerlink" title="启动码云的pakage服务，加载页面"></a>启动码云的pakage服务，加载页面</h3><ul>
<li>打开对应的仓库&gt;服务&gt;gitee Pakages&gt;启动</li>
<li>浏览器输入<a href="http://xxxx.gitee.io(xxx为gitee用户名)/">http://xxxx.gitee.io(xxx为gitee用户名)</a></li>
</ul>
<p>如果一切顺利将会看到你的博客上线！</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>配置文件的每个冒号都是英文形式，且每个冒号后面都要有一个空格。</li>
<li>每次删除某个发表的文章，或者对网页进行配置都要先运行hexo -clean，命令来清除缓存</li>
<li>每次hexo -d 部署文件后，都要手动在gitee pakege服务里手动更新一次。手动更新后直接访问博客可能会是上次的内容，别急，过段时间刷新即可。</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>前端使用cookie</title>
    <url>/2021/02/14/jquery/%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8cookie/</url>
    <content><![CDATA[<p>需要下载并引入jquery.cookie.js。<br>cookie有四个不同的属性: 名称，内容，域，路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$.cookie(&#39;the_cookie&#39;); &#x2F;&#x2F; 读取 cookie </span><br><span class="line">$.cookie(&#39;the_cookie&#39;, &#39;the_value&#39;); &#x2F;&#x2F; 存储 cookie </span><br><span class="line">$.cookie(&#39;the_cookie&#39;, &#39;the_value&#39;, &#123; expires: 7 &#125;); &#x2F;&#x2F; 存储一个带7天期限的 cookie </span><br><span class="line">$.cookie(&#39;the_cookie&#39;, &#39;&#39;, &#123; expires: -1 &#125;); &#x2F;&#x2F; 删除 cookie</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.cookie(&quot;currentMenuID&quot;);</span><br></pre></td></tr></table></figure>
<p>取值时会产生问题。<br>故：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.cookie(&quot;currentMenuID&quot;, &quot;menuID&quot;, &#123; path: &quot;&#x2F;&quot;&#125;); </span><br></pre></td></tr></table></figure>
<p>进行覆盖。同域下同一个cookieID对应一个值。</p>
]]></content>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql在Eclipes中向web中的引入</title>
    <url>/2021/01/03/jdbc/mysql%E5%9C%A8Eclipes%E4%B8%AD%E5%90%91web%E4%B8%AD%E7%9A%84%E5%BC%95%E5%85%A5/</url>
    <content><![CDATA[<h1 id="mysql-connector-java在web中的引入"><a href="#mysql-connector-java在WEB中的引入" class="headerlink" title="mysql-connector-java在WEB中的引入"></a>mysql-connector-java在WEB中的引入</h1><p>在java项目中，只需要引入mysql-connector-java-5.1.7-bin.jar就可以运行java项目。</p>
<p>在web项目中，当Class.forName(“om.mysql.jdbc.Driver”);时myeclipse是不会去查找字符串，不会去查找驱动的。所以只需要把mysql-connector-java-5.1.7-bin.jar拷贝到tomcat下lib目录就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库工具类</title>
    <url>/2021/01/03/jdbc/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<pre><code>public class DBUtil &#123;
    static final String JDBC_DRIVER =&quot;com.mysql.jdbc.Driver&quot;;
    static final String DB_URL =&quot;jdbc:mysql://localhost:3306/student?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf-8&quot;;
    static final String USER = &quot;root&quot;;
    static final String PASS = &quot;1210&quot;;
    private static Connection conn =null;
    static &#123;
        try &#123;
            Class.forName(JDBC_DRIVER);
            conn=DriverManager.getConnection(DB_URL, USER, PASS);

        &#125; catch (ClassNotFoundException e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125; catch (SQLException e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125;

    &#125;
    public static Connection getConnection() &#123;
        return conn;
    &#125;

&#125;
</code></pre>
]]></content>
      <tags>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql的ResultSet结果集为空判断</title>
    <url>/2021/02/11/jdbc/mysql%E7%9A%84ResultSet%E7%BB%93%E6%9E%9C%E9%9B%86%E4%B8%BA%E7%A9%BA%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(rs.next()) &#123;</span><br><span class="line">				erroString&#x3D;&quot;该用户名已被注册&quot;;</span><br><span class="line">			&#125;else &#123;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>indexDB</title>
    <url>/2021/06/03/js/indexDB/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         openDB(myDB.name, myDB.version);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> myDB = &#123;</span><br><span class="line">         name: <span class="string">&#x27;myList&#x27;</span>,</span><br><span class="line">         version: <span class="number">1</span>,</span><br><span class="line">         db: <span class="literal">null</span></span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> school = [&#123;</span><br><span class="line">         id: <span class="number">1001</span>,</span><br><span class="line">         name: <span class="string">&quot;北京大学&quot;</span>,</span><br><span class="line">         addr: <span class="string">&quot;北京&quot;</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">         id: <span class="number">1002</span>,</span><br><span class="line">         name: <span class="string">&quot;清华大学&quot;</span>,</span><br><span class="line">         addr: <span class="string">&quot;北京&quot;</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">         id: <span class="number">1003</span>,</span><br><span class="line">         name: <span class="string">&quot;上海交通大学&quot;</span>,</span><br><span class="line">         addr: <span class="string">&quot;上海&quot;</span></span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">openDB</span>(<span class="params">name, version</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> version = version || <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">var</span> request = <span class="built_in">window</span>.indexedDB.open(name, version);</span><br><span class="line">         request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(e.currentTarget.error.message);</span><br><span class="line">         &#125;;</span><br><span class="line">         request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">             myDB.db = e.target.result;</span><br><span class="line">             addData(myDB.db, <span class="string">&quot;school&quot;</span>);</span><br><span class="line">             fetchStoreByCursor(myDB.db, <span class="string">&quot;school&quot;</span>);</span><br><span class="line">         &#125;;</span><br><span class="line">         request.onupgradeneeded = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> db = e.target.result;</span><br><span class="line">             <span class="keyword">if</span> (!db.objectStoreNames.contains(<span class="string">&#x27;school&#x27;</span>)) &#123;</span><br><span class="line">                 <span class="keyword">var</span> store = db.createObjectStore(<span class="string">&#x27;school&#x27;</span>, &#123;</span><br><span class="line">                     keyPath: <span class="string">&#x27;id&#x27;</span></span><br><span class="line">                 &#125;);</span><br><span class="line">                 store.createIndex(<span class="string">&#x27;nameIndex&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">                     unique: <span class="literal">true</span></span><br><span class="line">                 &#125;);</span><br><span class="line">                 store.createIndex(<span class="string">&#x27;addrIndex&#x27;</span>, <span class="string">&#x27;addr&#x27;</span>, &#123;</span><br><span class="line">                     unique: <span class="literal">false</span></span><br><span class="line">                 &#125;);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">&#x27;DB version changed to &#x27;</span> + version);</span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">addData</span>(<span class="params">db, storeName</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> trans = db.transaction([storeName], <span class="string">&#x27;readwrite&#x27;</span>);</span><br><span class="line">         <span class="keyword">var</span> store = trans.objectStore(storeName);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; school.length; i++) &#123;</span><br><span class="line">             store.add(school[i]);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">fetchStoreByCursor</span>(<span class="params">db, storeName</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> transaction = db.transaction(storeName);</span><br><span class="line">         <span class="keyword">var</span> store = transaction.objectStore(storeName);</span><br><span class="line">         <span class="keyword">var</span> request = store.openCursor();</span><br><span class="line">         request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> cursor = e.target.result;</span><br><span class="line">             <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">                 <span class="built_in">console</span>.log(cursor.key);</span><br><span class="line">                 <span class="keyword">var</span> currentStudent = cursor.value;</span><br><span class="line">                 <span class="built_in">console</span>.log(currentStudent.name);</span><br><span class="line">                 <span class="keyword">var</span> table = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mytable&quot;</span>);</span><br><span class="line">                 <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&quot;tr&quot;</span>);</span><br><span class="line">                 <span class="keyword">var</span> imgtd = <span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);</span><br><span class="line">                 <span class="keyword">var</span> txttd = <span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);</span><br><span class="line">                 <span class="comment">//图片</span></span><br><span class="line">                 <span class="keyword">var</span> schimg = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">                 <span class="keyword">switch</span> (currentStudent.name) &#123;</span><br><span class="line">                     <span class="keyword">case</span> <span class="string">&quot;北京大学&quot;</span>:</span><br><span class="line">                         schimg.setAttribute(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;bj-playstore.png&quot;</span>);</span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                     <span class="keyword">case</span> <span class="string">&quot;清华大学&quot;</span>:</span><br><span class="line">                         schimg.setAttribute(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;qh-playstore.png&quot;</span>);</span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                     <span class="keyword">case</span> <span class="string">&quot;上海交通大学&quot;</span>:</span><br><span class="line">                         schimg.setAttribute(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;shj-playstore.png&quot;</span>);</span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                 &#125;</span><br><span class="line">                 schimg.setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;height: 100px;&quot;</span>);</span><br><span class="line">                 imgtd.appendChild(schimg);</span><br><span class="line"></span><br><span class="line">                 <span class="comment">//文字</span></span><br><span class="line">                 txttd.innerHTML = <span class="string">&quot; &lt;p style=&#x27;font-size: 45px;&#x27;&gt;&quot;</span> + currentStudent.name + <span class="string">&quot;&lt;/p&gt;&quot;</span> + <span class="string">&quot;&lt;p&gt;&quot;</span> + currentStudent.addr + <span class="string">&quot;&lt;p&gt;&quot;</span>;</span><br><span class="line">                 <span class="comment">//添加</span></span><br><span class="line">                 tr.appendChild(imgtd);</span><br><span class="line">                 tr.appendChild(txttd);</span><br><span class="line">                 table.appendChild(tr);</span><br><span class="line">                 cursor.continue();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">     &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>excute和excuteQuery的区别</title>
    <url>/2021/02/11/jdbc/mysql%E7%9A%84excute%E5%92%8CexcuteQuery%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>excute方法是直接执行，excuteQuery方法会返回结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一次需要用connection嵌入sql代码，其余的直接写在excute和excuteQuery里面，不写直接调用代码就是执行前一个sql语句</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>js判断undifine和null</title>
    <url>/2021/07/04/js/js%E5%88%A4%E6%96%ADundifine%E5%92%8Cnull/</url>
    <content><![CDATA[<h2 id="js判断undifine"><a href="#js判断undifine" class="headerlink" title="js判断undifine"></a>js判断undifine</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(exp) == <span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    alert(<span class="string">&quot;undefined&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="js判断null"><a href="#js判断null" class="headerlink" title="js判断null"></a>js判断null</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">if</span> (!exp &amp;&amp; <span class="keyword">typeof</span>(exp)!=”<span class="literal">undefined</span>” &amp;&amp; exp!=<span class="number">0</span>) </span><br><span class="line">&#123; </span><br><span class="line">alert(“is <span class="literal">null</span>”); </span><br><span class="line">&#125;　</span><br></pre></td></tr></table></figure>

<p>尽管如此，我们在 DOM 应用中，一般只需要用 (!exp) 来判断就可以了，因为 DOM 应用中，可能返回 null，可能返回 undefined，如果具体判断 null 还是 undefined 会使程序过于复杂。</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>jstl_bug</title>
    <url>/2021/01/23/jstl_bug/jstl-bug/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.apache.jasper.JasperException: &#x2F;index.jsp (行.: [18], 列: [0]) 根据标记文件中的TLD或attribute指令，attribute[items]不接受任何表达式</span><br></pre></td></tr></table></figure>

<p>尝试使用前缀&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jstl/core_rt&quot;">http://java.sun.com/jstl/core_rt&quot;</a> %&gt;代替<br>&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jstl/core&quot;">http://java.sun.com/jstl/core&quot;</a> %&gt;</p>
]]></content>
      <tags>
        <tag>jstl_bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装vim编辑器</title>
    <url>/2021/06/03/linux/Linux%E4%B8%8B%E5%AE%89%E8%A3%85vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu 系统输入命令：sudo apt-get install vim-gtk</span><br><span class="line">centos 系统输入命令：yum -y install vim*</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>maven的标准setting.xml</title>
    <url>/2021/06/04/maven/maven%E7%9A%84%E6%A0%87%E5%87%86setting-xml/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;settings xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0&quot; </span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;settings-1.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 本地仓库的位置 --&gt;</span><br><span class="line">    &lt;localRepository&gt;$&#123;user.home&#125;&#x2F;.m2&#x2F;repository&lt;&#x2F;localRepository&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;!-- Apache Maven 配置 --&gt;</span><br><span class="line">    &lt;pluginGroups&#x2F;&gt;</span><br><span class="line">    &lt;proxies&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 私服发布的用户名密码 --&gt;</span><br><span class="line">    &lt;servers&gt;</span><br><span class="line">        &lt;server&gt;</span><br><span class="line">            &lt;id&gt;releases&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;username&gt;deployment&lt;&#x2F;username&gt;</span><br><span class="line">            &lt;password&gt;He2019&lt;&#x2F;password&gt;</span><br><span class="line">        &lt;&#x2F;server&gt;</span><br><span class="line">        &lt;server&gt;</span><br><span class="line">            &lt;id&gt;snapshots&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;username&gt;deployment&lt;&#x2F;username&gt;</span><br><span class="line">            &lt;password&gt;He2019&lt;&#x2F;password&gt;</span><br><span class="line">        &lt;&#x2F;server&gt;</span><br><span class="line">    &lt;&#x2F;servers&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 阿里云镜像 --&gt;</span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!-- https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;public&#x2F; --&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">        &lt;&#x2F;mirror&gt;</span><br><span class="line">    &lt;&#x2F;mirrors&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置: java8, 先从阿里云下载, 没有再去私服下载  --&gt;</span><br><span class="line">    &lt;!-- 20190929 hepengju 测试结果: 影响下载顺序的是profiles标签的配置顺序(后面配置的ali仓库先下载), 而不是activeProfiles的顺序 --&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;!-- 全局JDK1.8配置 --&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;jdk1.8&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;activation&gt;</span><br><span class="line">                &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;</span><br><span class="line">                &lt;jdk&gt;1.8&lt;&#x2F;jdk&gt;</span><br><span class="line">            &lt;&#x2F;activation&gt;</span><br><span class="line">            &lt;properties&gt;</span><br><span class="line">                &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">                &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">                &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">                &lt;maven.compiler.compilerVersion&gt;1.8&lt;&#x2F;maven.compiler.compilerVersion&gt;</span><br><span class="line">            &lt;&#x2F;properties&gt;</span><br><span class="line">        &lt;&#x2F;profile&gt;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        &lt;!-- Nexus私服配置: 第三方jar包下载, 比如oracle的jdbc驱动等 --&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;dev&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;repositories&gt;</span><br><span class="line">                &lt;repository&gt;</span><br><span class="line">                    &lt;id&gt;nexus&lt;&#x2F;id&gt;</span><br><span class="line">                    &lt;url&gt;http:&#x2F;&#x2F;nexus.hepengju.cn:8081&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">                    &lt;releases&gt;</span><br><span class="line">                        &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">                    &lt;&#x2F;releases&gt;</span><br><span class="line">                    &lt;snapshots&gt;</span><br><span class="line">                        &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">                    &lt;&#x2F;snapshots&gt;</span><br><span class="line">                &lt;&#x2F;repository&gt;</span><br><span class="line">            &lt;&#x2F;repositories&gt;</span><br><span class="line">            &lt;pluginRepositories&gt;</span><br><span class="line">                &lt;pluginRepository&gt;</span><br><span class="line">                    &lt;id&gt;public&lt;&#x2F;id&gt;</span><br><span class="line">                    &lt;name&gt;Public Repositories&lt;&#x2F;name&gt;</span><br><span class="line">                    &lt;url&gt;http:&#x2F;&#x2F;nexus.hepengju.cn:8081&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">                &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">            &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">        &lt;&#x2F;profile&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 阿里云配置: 提高国内的jar包下载速度 --&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;ali&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;repositories&gt;</span><br><span class="line">                &lt;repository&gt;</span><br><span class="line">                    &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">                    &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">                    &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">                    &lt;releases&gt;</span><br><span class="line">                        &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">                    &lt;&#x2F;releases&gt;</span><br><span class="line">                    &lt;snapshots&gt;</span><br><span class="line">                        &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">                    &lt;&#x2F;snapshots&gt;</span><br><span class="line">                &lt;&#x2F;repository&gt;</span><br><span class="line">            &lt;&#x2F;repositories&gt;</span><br><span class="line">            &lt;pluginRepositories&gt;</span><br><span class="line">                &lt;pluginRepository&gt;</span><br><span class="line">                    &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">                    &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">                    &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">                &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">            &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">        &lt;&#x2F;profile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;profiles&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 激活配置 --&gt; </span><br><span class="line">    &lt;activeProfiles&gt;</span><br><span class="line">        &lt;activeProfile&gt;jdk1.8&lt;&#x2F;activeProfile&gt;</span><br><span class="line">        &lt;activeProfile&gt;dev&lt;&#x2F;activeProfile&gt;</span><br><span class="line">        &lt;activeProfile&gt;ali&lt;&#x2F;activeProfile&gt;</span><br><span class="line">    &lt;&#x2F;activeProfiles&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlite数据库创建使用</title>
    <url>/2021/06/03/jdbc/sqlite%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> SQLiteDatabase db;</span><br><span class="line">db&#x3D;SQLiteDatabase.openOrCreateDatabase(getContext().getFilesDir().toString()+&quot;test.db&quot;,null);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis映射</title>
    <url>/2021/06/08/mybatis/mybatis%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!--namespace&#x3D;绑定一个对应的Dao&#x2F;Mapper接口--&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;nuc.ss.mapper.UserMapper&quot;&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:*&#x2F;mapper&#x2F;*.xml</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>httpServlet初始编码配置</title>
    <url>/2021/01/03/servlet/httpServlet%E5%88%9D%E5%A7%8B%E7%BC%96%E7%A0%81%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>SERVLET中的web.xml配置</title>
    <url>/2021/01/03/servlet/servlet%E4%B8%AD%E7%9A%84web-xml%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="url-pattern"><a href="#url-pattern" class="headerlink" title="url-pattern"></a>url-pattern</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>在写url-pattern的时候不需要加后缀,该名称为响应名称，只需要与表单的action一致即可。 也就是说我们只需要把表单响应页面与后端绑定起来即可，初始页面只要在对的路径，能够在服务器上打开即可。<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;InputDemo&lt;&#x2F;servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;&#x2F;input&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><p>  写url-pattern时不能用/*，因为这样会把我们的html静态页面也全部包含其中，导致无法加载html页面，而是把任何页面都当作响应页面处理，所以最好的办法是用一个后缀来区分<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;url-pattern&gt;*.do&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;register.do&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line"> String action&#x3D;uri.substring(uri.lastIndexOf(&quot;&#x2F;&quot;)+1,uri.lastIndexOf(&quot;.&quot;));</span><br><span class="line">if(action.equals(&quot;register&quot;)) &#123;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>如果写成”/*.do”会报错。</li>
<li>别忘了lastIndexOf(“/“)后面还有+1</li>
</ul>
<h1 id="welcome-file"><a href="#welcome-file" class="headerlink" title="welcome-file"></a>welcome-file</h1><p>对于初始页面，我们只需要配置<welcome-file>即可，也就是刚启动servlet就能看到的页面</welcome-file></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;welcome-file-list&gt;</span><br><span class="line">&lt;welcome-file&gt;input.html&lt;&#x2F;welcome-file&gt;</span><br><span class="line">  &lt;&#x2F;welcome-file-list&gt;</span><br></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>servlet</category>
      </categories>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>servlet编程模型</title>
    <url>/2021/02/11/servlet/servlet%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h1><p>1.初始化页面之前，如果需要对某些数据进行判断再初始化，则需要通过一个单独.do服务器模块进行一些数据的配置判断再 <strong>过渡</strong> 到新的页面</p>
<p>2.在同一个页面，仅对页面的部分内容进行改变时（仅做前后端数据交流）</p>
<ul>
<li><p>如果需要再整个页面不变化，只需要变化其中某一些元素且不涉及到页面跳转的内容，则通过ajax直接对元素内的元素进行切换。</p>
</li>
<li><p>数据库的改动（不需要从后端接收数据时）<br>仅需要通过一个链接后面接上相应的参数直接连接到.do模块对数据库进行改动，再重新加载会原来的页面即可。</p>
</li>
</ul>
<p>3.如果一个.do模块既可能仅仅对页面的部分内容进行改变，也有可能通过这个.do模块直接转载到另一个页面。则需要通过提交数据submit的方式或者是链接的方式加载到后端相应的模块。如果需要返回数据给原来的页面，通过设置request的方式返回jsp页面即可。</p>
<h1 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h1><ul>
<li>session<br>session数据会在规定的时间内适用于所有的页面，适合存放身份验证等信息。</li>
<li>request<br>一次请求的数据传输，仅需要后端到前端初始化时，通过request.setAttribute存放数据进行传输（请求完其实就释放了）</li>
<li>ajax_json/out.println<br>如果页面中的某个元素内部的数据发生结构和数据变化时，用ajax方法直接加载该模块儿的数据</li>
</ul>
]]></content>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>servle后端中的弹窗</title>
    <url>/2021/01/13/servlet/servle%E5%90%8E%E7%AB%AF%E4%B8%AD%E7%9A%84%E5%BC%B9%E7%AA%97/</url>
    <content><![CDATA[<p>\“\“之间按照正常的字符串格式写即可,这是转义字符，里面还包含多个””时，就得用这种方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&quot;return confirm(&#39;是否确定删除&quot;+rs.getString(&quot;name&quot;)+&quot;&#39;);\&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>session超时设置</title>
    <url>/2021/02/11/servlet/session%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.setMaxInactiveInterval(10);</span><br></pre></td></tr></table></figure>
<p>如果不停刷新，也会使计数器不断地刷新，10秒后session还是会存在。</p>
]]></content>
  </entry>
  <entry>
    <title>uri和url</title>
    <url>/2021/02/11/servlet/uri%E5%92%8Curl/</url>
    <content><![CDATA[<ul>
<li>URI是什么？有什么用？<br>URI（统一资源标识符）是标识逻辑或物理资源的字符序列，与URL类似，也是一串字符。通过使用位置，名称或两者来标识Internet上的资源；它允许统一识别资源。</li>
</ul>
<p>有两种类型的URI，统一资源标识符（URL）和统一资源名称（URN）</p>
<ul>
<li>URL是什么？有什么用？<br>URL（统一资源定位符）是Internet上资源的地址，可以定义为引用地址的字符串，用于指示资源的位置以及用于访问它的协议</li>
</ul>
]]></content>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>后端配置跨域</title>
    <url>/2021/06/03/servlet/%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String originHeads &#x3D; request.getHeader(&quot;Origin&quot;);</span><br><span class="line">	     response.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);</span><br><span class="line">	     response.setHeader(&quot;Access-Control-Allow-Origin&quot;, originHeads);</span><br><span class="line">         response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST,GET,OPTIONS,DELETE,HEAD,PUT,PATCH&quot;);</span><br><span class="line">         response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;36000&quot;);</span><br><span class="line">         response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept,Authorization,authorization&quot;);</span><br><span class="line">         response.setHeader(&quot;Access-Control-Allow-Credentials&quot;,&quot;true&quot;);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>零散servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>细谈getRequestDispatcher与sendRedirect的区别</title>
    <url>/2021/02/11/servlet/%E7%BB%86%E8%B0%88getRequestDispatcher%E4%B8%8EsendRedirect%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>首先我们要知道：</p>
<p>(1)request.getRequestDispatcher()是请求转发，前后页面共享一个request ; 这个是在服务端运行的，对浏览器来说是透明的。<br>(2)response.sendRedirect()是重新定向，前后页面不是一个request。而这个是在浏览器端运行的。</p>
<h2 id="redirect方式"><a href="#redirect方式" class="headerlink" title="redirect方式"></a>redirect方式</h2><p>　 response.sendRedirect(“/a.jsp”);<br>　　  页面的路径是相对路径。sendRedirect可以将页面跳转到任何页面，不一定局限于本web应用中，如：<br>　　  response.sendRedirect(“URL”);<br>　　  跳转后浏览器地址栏变化。<br>　　  这种方式要传值出去的话，只能在url中带parameter或者放在session中，无法使用request.setAttribute来 传递。所以该方式只适用于无传值跳转</p>
<h2 id="forward方式"><a href="#forward方式" class="headerlink" title="forward方式"></a>forward方式</h2><p> request.getRequestDispatcher(“/路径（可以是jsp路径也可以是servlet）”) .forward(request, response);</p>
<p>如：</p>
<p>request.getRequestDispatcher(“/2.jsp）”) .forward(request, response);</p>
<p>request.getRequestDispatcher(“/servlet/HomeServlet）”) .forward(request, response);<br>　　Servlet页面跳转的路径是相对路径。forward方式只能跳转到本web应用中的页面上。<br>　　跳转后浏览器地址栏不会变化。<br>　　使用这种方式跳转，传值可以使用三种方法：url中带parameter，session，request.setAttribute</p>
]]></content>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Pathvariable用法</title>
    <url>/2021/06/05/springboot/Pathvariable%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(/delte/&#123;id&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line"><span class="comment">//在这里直接用id即可</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity</title>
    <url>/2021/06/06/springSecurity/SpringSecurity/</url>
    <content><![CDATA[<p>1.@EnableWebSecurity</p>
<p>2.继承WebSercurityConfigurAdapter</p>
<p>3.重写两个configuer(一个参数是http,两一个是auth)</p>
<ul>
<li>http.authorizeRequest.antMatchers(/index/**).hasRoles（vip)</li>
<li>http.formLogin()</li>
</ul>
]]></content>
      <tags>
        <tag>springsecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>RequestMapping中return的两种方式</title>
    <url>/2021/06/05/springboot/RequestMapping%E4%B8%ADreturn%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:/admin-index.html&quot;</span>;  <span class="comment">//跳转到该页面</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;       <span class="comment">//返回该页面的内容（url取决于请求地址）</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>RequestParam</title>
    <url>/2021/06/05/springboot/RequestParam/</url>
    <content><![CDATA[<p>1.如果在前端页面已经保证参数不为空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestParam(&quot;username&quot;)</span> String username</span><br></pre></td></tr></table></figure>

<p>2.如果前端页面没有保证参数不为空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestParam(request=false)</span> Strign username  <span class="comment">//request=false代表允许参数不为空</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>pom配置打包时跳过测试</title>
    <url>/2021/06/04/springboot/pom%E9%85%8D%E7%BD%AE%E6%89%93%E5%8C%85%E6%97%B6%E8%B7%B3%E8%BF%87%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">    在工作中,很多情况下我们打包是不想执行测试用例的</span><br><span class="line">    可能是测试用例不完事,或是测试用例会影响数据库数据</span><br><span class="line">    跳过测试用例执</span><br><span class="line">--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-surefire-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!--跳过项目运行测试用例--&gt;</span><br><span class="line">        &lt;skipTests&gt;true&lt;&#x2F;skipTests&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot案例</title>
    <url>/2021/06/05/springboot/springboot%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>1.将静态资源放入templates文件夹，将链接都转换为thymeleaf模式</p>
<p>2.关闭thymeleaf缓存<code>thymeleaf.cache=false</code></p>
<p>2.编写首页的controller</p>
<ul>
<li>在方法的参数里用@RequestParam接收表单数据，并且用Model传回一些数据</li>
</ul>
<p>3.修改静态资源的将数据显示出来</p>
<p>4.在config文件夹中创建MyMvcConfig类</p>
<ul>
<li>使用@configuration注解</li>
<li>实现webmvcConfigurer接口</li>
<li>重写addviewControllers方法</li>
</ul>
<p>5.在通过参数registry修改映射</p>
<h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>1.在controller中添加参数Httpsession</p>
<ul>
<li>创建userlog的session</li>
</ul>
<p>2.在config文件夹创建logHandlerInteraptor</p>
<ul>
<li>继承handlerinteraptor</li>
<li>重写prehandle方法(true是通行，false是拦截)</li>
</ul>
<p>3.通过request获取session</p>
<ul>
<li>为空就给request设置msg属性提示权限不足</li>
<li>非空就转发到主页</li>
</ul>
<p>4.在MyMvnConfig类中添加拦截器</p>
<ul>
<li>重写addInteraptorHandle方法</li>
<li>register添加过滤器</li>
<li>过滤器add和excute需要过滤的内容</li>
</ul>
]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>关于动态页面404错误处理</title>
    <url>/2021/06/05/springboot/%E5%85%B3%E4%BA%8E%E9%A1%B5%E9%9D%A2404/</url>
    <content><![CDATA[<ul>
<li>页面需要在Controller中注册，或者在WebMvnConfiguration中映射才能找到。</li>
<li><ul>
<li>需要数据处理注册controller，不需要直接映射就好</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>部署springboot项目</title>
    <url>/2021/06/09/springboot/%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup java -jar xxx.jar &gt; nohup.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux|grep xxx.jar</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>主键ID的重排序</title>
    <url>/2021/01/13/sql/%E4%B8%BB%E9%94%AEID%E7%9A%84%E9%87%8D%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="删除元素后id自动减少"><a href="#删除元素后id自动减少" class="headerlink" title="删除元素后id自动减少"></a>删除元素后id自动减少</h2><p>先删除再建立自增长的主键ID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table student drop id;</span><br><span class="line">alter table student add id int primary key auto_increment;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>让某个元素排序第一</title>
    <url>/2021/06/03/sql/%E8%AE%A9%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%E6%8E%92%E5%BA%8F%E7%AC%AC%E4%B8%80/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select pid, name</span><br><span class="line">from t_province</span><br><span class="line">where 1 &#x3D; 1</span><br><span class="line">order by case when name &#x3D; &quot;广东&quot; then 0 else name end</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql_bug</title>
    <url>/2021/02/11/sqlbug/where-clause/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unknown column &#39;name&#39; in &#39;where clause&#39;</span><br></pre></td></tr></table></figure>

<p>有可能是url中的仓库名称写错了。</p>
]]></content>
      <tags>
        <tag>sqlbug</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh自定义产生密钥</title>
    <url>/2020/11/29/ssh/ssh%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%A7%E7%94%9F%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<p>产生gitbub和gitbub.pub密钥文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;YOUR_EMAIL@YOUREMAIL.COM&quot; -f &#x2F;c&#x2F;user&#x2F;justdoit&#x2F;.ssh&#x2F;github</span><br></pre></td></tr></table></figure>
<p>“-c”必须大写，不然无法识别</p>
]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>vim批量替换命令实践</title>
    <url>/2021/06/03/vim/vim%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%91%BD%E4%BB%A4%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="vim批量替换命令实践"><a href="#vim批量替换命令实践" class="headerlink" title="vim批量替换命令实践"></a>vim批量替换命令实践</h2><p>语法为 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:[addr]s&#x2F;源字符串&#x2F;目的字符串&#x2F;[option]</span><br></pre></td></tr></table></figure>

<p>全局替换命令为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:%s&#x2F;源字符串&#x2F;目的字符串&#x2F;g</span><br></pre></td></tr></table></figure>

<p><strong>[addr] 表示检索范围，省略时表示当前行。</strong></p>
<p>“1,20” ：表示从第1行到20行；</p>
<p>“%” ：表示整个文件，同“1,$”；</p>
<p>“. ,$” ：从当前行到文件尾；</p>
<p><strong>s : 表示替换操作</strong></p>
<p><strong>[option] : 表示操作类型</strong></p>
<p>g 表示全局替换; </p>
<p>c 表示进行确认</p>
<p>p 表示替代结果逐行显示（Ctrl + L恢复屏幕）;</p>
<p>省略option时仅对每行第一个匹配串进行替换;</p>
<p>如果在源字符串和目的字符串中出现特殊字符，需要用”\”转义 如 \t</p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>如何快速搭建web工程</title>
    <url>/2021/06/05/web/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAweb%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p>1.有一套自己的后台模板</p>
<ul>
<li>x-admin</li>
</ul>
<p>2.通过前端框架能组出一套页面,得熟悉栅栏系统</p>
<ul>
<li><p>layui</p>
</li>
<li><p>bootstrap</p>
</li>
<li><p>semantic-ui</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>java模拟浏览器发送请求</title>
    <url>/2021/01/03/%E7%88%AC%E8%99%AB/java%E6%A8%A1%E6%8B%9F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URL url&#x3D;new URL(&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;&quot;);</span><br><span class="line"></span><br><span class="line">HttpsURLConnection conn&#x3D;(HttpsURLConnection)url.openConnection();</span><br><span class="line">      conn.setRequestMethod(&quot;GET&quot;);</span><br><span class="line">      conn.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla&#x2F;5.0(Windows NT 10.0;Win64;x64)AppleWebKit&#x2F;537.3&quot;);</span><br><span class="line">      BufferedReader br&#x3D;new BufferedReader(new InputStreamReader(conn.getInputStream(),&quot;UTF-8&quot;));</span><br><span class="line">      String msg&#x3D;null;</span><br><span class="line">      while(null!&#x3D;(msg&#x3D;br.readLine())) &#123;</span><br><span class="line">      	System.out.println(msg);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫包</title>
    <url>/2021/06/05/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%8C%85/</url>
    <content><![CDATA[<ul>
<li>jsoup     //爬网页</li>
<li>tika        //爬音乐，爬视频</li>
<li>模拟 浏览器     //ajax请求</li>
</ul>
]]></content>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发从入门到精通</title>
    <url>/2021/07/04/Android%E5%BC%80%E5%8F%91%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
    <content><![CDATA[<h1 id="imageswitcher"><a href="#ImageSwitcher" class="headerlink" title="ImageSwitcher"></a>ImageSwitcher</h1><ul>
<li>写xml布局文件（ImageSwitcher）</li>
<li>实现setFactority工厂新建初始化图片资源(imgview)并返回</li>
<li>实现触发动作的监听器<ul>
<li>左滑右滑可以通过onTouch的ActionDown和ActionUp来实现</li>
</ul>
</li>
<li>实现setAnimation设定进入和返回的动画</li>
<li>重新设定切换器的图片资源即可(ImageSwitcher.setRouse)</li>
<li></li>
<li><strong>注:</strong></li>
<li>getX是浮点型</li>
<li>onTouch监听动作分down时进行还是up时进行</li>
</ul>
<h1 id="viewfilper"><a href="#ViewFilper" class="headerlink" title="ViewFilper"></a>ViewFilper</h1><ul>
<li>实例化</li>
<li>把图片资源addView遍历进去</li>
<li>设置inAnimation和outAnimation</li>
<li>showproviders显示前一张</li>
<li>showNext显示下一张</li>
</ul>
<h1 id="gridview"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h1><ul>
<li><p>xml配置</p>
<ul>
<li>numColens：可以调成自动排列，也可以指定列数</li>
</ul>
</li>
<li><p>可以用SimpleAdapter适配器加载图片资源</p>
</li>
<li><p>可以自定义BaseAdapter</p>
<ul>
<li>直接在主方法中自定义                         <img src="https://api2.mubu.com/v3/document_image/54766000-13e8-4809-bd9b-2ed85a5afa55-3810853.jpg" alt="img">                                        </li>
<li>重写getcount和getView方法</li>
<li>getcount返回总数</li>
<li>getview初始化组件，并逐个返回相应位置的组件</li>
</ul>
<a id="more"></a>

</li>
</ul>
<h1 id="自定义baseadapter"><a href="#自定义baseAdapter" class="headerlink" title="自定义baseAdapter"></a>自定义baseAdapter</h1><ul>
<li>getcount是数量</li>
<li>getview单个视图的返回<ul>
<li>要判断是视图是否为空（第一次时是空的）</li>
<li>不空的直接强转返回即可</li>
</ul>
</li>
</ul>
<h1 id="spinner和listview"><a href="#Spinner和ListView" class="headerlink" title="Spinner和ListView"></a>Spinner和ListView</h1><ul>
<li>Spinner有个下拉样式可以选</li>
<li>ListView有列表样式可以选</li>
</ul>
<h1 id="scrollview"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h1><ul>
<li>内部只能含有一个组件，如果要多个就用布局管理器包裹</li>
<li>改名字还能实现纵向和横向</li>
</ul>
<h1 id="tabhost"><a href="#Tabhost" class="headerlink" title="Tabhost"></a>Tabhost</h1><ul>
<li>setIndicator后面还可以接图标                        <img src="https://api2.mubu.com/v3/document_image/fdf1e47c-bafb-492e-bcf2-51dc7d091cea-3810853.jpg" alt="img">                            </li>
<li>xml<ul>
<li>分别写Tabhost、TabWiget、TabContent</li>
<li>Tabhost有预定义id,@android:id Tabhost</li>
<li>TabWiget有预定义id,@android :id tabs</li>
<li>TabContent是一个Framlayout,也有预定义id，@android :id Tabcontent</li>
<li>将后面两个包裹在一个布局管理器中</li>
</ul>
</li>
<li>分别写fragment的布局文件</li>
<li>java<ul>
<li>定义Tabhost</li>
<li>setup对tabhost进行初始化</li>
<li>通过inflater将两个fragment布局文件与tabcontent进行绑定</li>
<li>tabhost通过id分别添加标签页标识，标签页布局，设定标签页标题</li>
</ul>
</li>
</ul>
<h1 id="activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1><ul>
<li>finish()关闭Activity</li>
<li>onCreate(null); 刷新Activity</li>
<li>StratActivityForresult<ul>
<li>用该方法启动要多写一个请求码</li>
<li>在被调用的activity中要setResut设置一个结果码</li>
<li>通过点击某个按钮finish掉新的activity</li>
<li>在主Activity中重写OnActivityResult方法，判断请求吗和结果码进行判断并获取数据</li>
</ul>
</li>
</ul>
<h1 id="fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h1><ul>
<li>xml<ul>
<li>name可以指定默认的Fragment</li>
</ul>
</li>
<li>分别编写fragment布局文件和Fragment对应实体类，并进行绑定</li>
<li>java<ul>
<li>配合FragmentManiger新建FragmentTranscation ft</li>
<li>ft.add添加fragment</li>
<li>ft.replace替换fragment</li>
<li>这里用来添加或替换的都是我们定义的Fragment实体类</li>
</ul>
</li>
</ul>
<h1 id="intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h1><ul>
<li>ComponentName<ul>
<li>实例化两个参数，一个包名，一个完整Activity类名</li>
</ul>
</li>
<li>Action和Data<ul>
<li>Action和Data配合使用</li>
<li>Data都有对应Action的一些前缀</li>
<li>Data里面的字符串要变成URI</li>
</ul>
</li>
<li>Action和Category<ul>
<li>两个用法差不多，都是通过对应常量用来唤醒系统某个组件</li>
<li>Action是想要做的动作，Category是怎么去实现这个动作</li>
</ul>
</li>
<li>Flags<ul>
<li>配置如何启动Activity</li>
<li>用intent点出来的常量指定</li>
<li>比如新的Acvity不保留历史记录，回到主界面再启动显示的是原来的Activity</li>
</ul>
</li>
<li>隐式Intent<ul>
<li>说白了就是不用指定类名，用Action,Data,Category启动Activity</li>
</ul>
</li>
<li>Intent过滤器<ul>
<li>在manifest中配置category和action</li>
<li>在主类intent中配置Action启动新的Activity</li>
<li>跳转时可能会让我们选择多个Acivity中的一个，因为其他的Activity都可能包含这个Activity</li>
</ul>
</li>
</ul>
<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><ul>
<li>监听处理</li>
<li>回调处理：就是重写方法，监听对象是整个activity</li>
</ul>
<h1 id="物理按键处理"><a href="#物理按键处理" class="headerlink" title="物理按键处理"></a>物理按键处理</h1><ul>
<li>一般都有对应的常量，可以通过KEY_EVENT获得</li>
<li>通过回调方法事件处理即可</li>
</ul>
<h1 id="长按弹出窗口"><a href="#长按弹出窗口" class="headerlink" title="长按弹出窗口"></a>长按弹出窗口</h1><ul>
<li>重写回调函数onCreateContextMenu</li>
<li>在里面直接menu.add添加字符串即可</li>
<li>然后在监听器中注册registerForContextMenu(v)</li>
<li>打开OpenContextMenu(v)即可</li>
</ul>
<h1 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h1><ul>
<li>OnTouch触摸事件会有一个evet事件源</li>
<li>如果不区分按下和抬起，整个事件监听的就是按下到抬起的过程</li>
<li>（能够获得手指触摸的xy,如果拖动，xy将持续变化）</li>
<li>如果区分，则分别监听按下和抬起事件</li>
</ul>
<h1 id="手势检测"><a href="#手势检测" class="headerlink" title="手势检测"></a>手势检测</h1><ul>
<li>实现Gestruedetector.OnGestureListener接口</li>
<li>重写的Down方法一定得返回true，否则整个手势无效</li>
<li>重写方法Fling,里面的e1,e2分别可以获得起始位置和结束位置</li>
<li>将接口添加到GestrueDetector实例中</li>
<li>重写OnTouch回调函数，让它return gestrueDetector.onTouch(把super替换掉)</li>
</ul>
<h1 id="手势创建和使用"><a href="#手势创建和使用" class="headerlink" title="手势创建和使用"></a>手势创建和使用</h1><ul>
<li>使用GestureBuilder工具制作gesture手势文件</li>
<li>将gesture手势文件放入raw文件夹</li>
<li>使用GestureOverLayView组件</li>
<li>继承GestureOverLayView.OnGestruePerformedListener</li>
<li>创建GestureLibery绑定gesture文件</li>
<li>重写.OnGestruePerformedListener方法</li>
<li>把libery遍历成Pridection数组</li>
<li>遍历Pridection.score,把比零大的角标记好，并把score赋值给初始是零的那个变量，继续遍历。</li>
<li>通过Pridection对象的get(index).name获得手势对应名字</li>
</ul>
<h1 id="字符串资源动态使用"><a href="#字符串资源动态使用" class="headerlink" title="字符串资源动态使用"></a>字符串资源动态使用</h1><ul>
<li>getResource.getString(<a href="http://r.string.name/">R.String.name</a>)</li>
</ul>
<h1 id="尺寸资源"><a href="#尺寸资源" class="headerlink" title="尺寸资源"></a>尺寸资源</h1><ul>
<li>dimens.xml</li>
<li>dp 布局和组件用，可以在不同设备实现缩放</li>
<li>sp 字体用这个，可以根据系统字体进行缩放</li>
</ul>
<h1 id="布局资源"><a href="#布局资源" class="headerlink" title="布局资源"></a>布局资源</h1><ul>
<li>可以通过&lt;include layout=”@android .layout.imge”&gt;&lt;/include&gt;</li>
</ul>
<h1 id="数组资源"><a href="#数组资源" class="headerlink" title="数组资源"></a>数组资源</h1><ul>
<li>array 尺寸资源</li>
<li>array-String 字符串资源</li>
<li>array-Integer 整形数组资源（颜色，id等）可以动态添加的时候用</li>
</ul>
<h1 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h1><ul>
<li>用9-patch做可拉伸的图片</li>
</ul>
<h1 id="statelistdrawble"><a href="#StateListDrawble" class="headerlink" title="StateListDrawble"></a>StateListDrawble</h1><ul>
<li>被<code>\&lt;select&gt;</code>包裹着</li>
<li>通过item配置相应状态下的样式</li>
</ul>
<h1 id="主题资源"><a href="#主题资源" class="headerlink" title="主题资源"></a>主题资源</h1><ul>
<li>包裹在<code>\&lt;style&gt;</code>下</li>
<li>父类可以继承appthem</li>
<li>在item中配置各种状态</li>
<li>可以在manifest中修改主题</li>
</ul>
<h1 id="样式资源"><a href="#样式资源" class="headerlink" title="样式资源"></a>样式资源</h1><ul>
<li>和主题资源相似，只不过不继承appthem</li>
<li>在需要的组件上使用即可</li>
</ul>
<h1 id="选项菜单"><a href="#选项菜单" class="headerlink" title="选项菜单"></a>选项菜单</h1><ul>
<li>编写menu.xml,包含id和title</li>
<li>重写OnCreateOptionMenu</li>
<li>用MenuInflater绑定menu.xml资源</li>
<li>通过OnOptionSelect回调函数，判断id并事件处理</li>
</ul>
<h1 id="上下文菜单"><a href="#上下文菜单" class="headerlink" title="上下文菜单"></a>上下文菜单</h1><ul>
<li>编写menu</li>
<li>用registerForContentMenu为控件注册上下文</li>
<li>重写OnCreateContextMenu(注意删掉父类的构造方法)</li>
<li>用MenuInflater绑定menu.xml资源</li>
<li>通过OnContextSelect回调函数，判断id并事件处理</li>
</ul>
<h1 id="actionbar"><a href="#ActionBar" class="headerlink" title="ActionBar"></a>ActionBar</h1><ul>
<li>通过getSuppertActionBar创建ActionBar实体类</li>
<li>通过ActionBar.hide()隐藏</li>
<li>通过ActionBar.show()显示</li>
</ul>
<h1 id="actionitem"><a href="#Actionitem" class="headerlink" title="Actionitem"></a>Actionitem</h1><ul>
<li>在menu文件中通过app:showAsAction属性配置</li>
<li>其他操作和选项菜单一致</li>
</ul>
<h1 id="actionview"><a href="#ActionView" class="headerlink" title="ActionView"></a>ActionView</h1><ul>
<li>在menu文件中通过app:actionViewClass属性指定，可以让搜索按钮变成搜索框</li>
<li>在menu文件中通过app:actionlayout属性指定布局文件，跳转到布局文件</li>
</ul>
<h1 id="actiontab"><a href="#ActionTab" class="headerlink" title="ActionTab"></a>ActionTab</h1><ul>
<li>创建对应的fragment布局文件和fragment类</li>
<li>创建MyTabListener实现AcionBar.TabListener接口<ul>
<li>用构造方法初始化final修饰的Activity和Class</li>
<li>再创造一个私有的Fragment实体类</li>
<li>重写被选择方法和不被选择方法</li>
<li>在被选则时如果fragment为空，通过Fragment.instantiat方法初始化（参数是之前的activity和class）并将fragment通过ft.add添加进去</li>
<li>在判断外面写上ft.attach(fragment)显示</li>
<li>在不被选择时，如果fragment不为空，则使用ft,distach(frament)移除</li>
</ul>
</li>
<li>actionbar.setNavicationMode(ActionBar.NAVICATION_MODE_TABS)配置为选项卡模式</li>
<li>隐藏actionbar标题栏</li>
<li>actionbar.addTab一个个添加到标题，以及在监听器中传入对应fragment</li>
</ul>
<h1 id="层级式导航"><a href="#层级式导航" class="headerlink" title="层级式导航"></a>层级式导航</h1><ul>
<li>在mainifest中向activity添加mate-data标签</li>
<li>用name和value指定父Activity</li>
<li>通过navUtils判断是否有父类</li>
<li>有的话通过actionbar.homeasupEnable(true)显示向左箭头</li>
</ul>
<h1 id="alertdialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog "></a>AlertDialog <img src="https://api2.mubu.com/v3/document_image/6c4ba671-f38e-4a28-af30-80cbaace15a3-3810853.jpg" alt="img"></h1><ul>
<li>实例化                                <img src="https://api2.mubu.com/v3/document_image/f696b26a-c5b4-49d9-8e10-007fabff73ad-3810853.jpg" alt="img">                            </li>
<li>设定属性</li>
<li>在按钮处绑定数据，以及添加监听器                                <img src="https://api2.mubu.com/v3/document_image/53f7a765-af4f-4055-a5dd-eff7c7aaf07b-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="notification通知"><a href="#Notification通知" class="headerlink" title="Notification通知"></a>Notification通知</h1><ul>
<li>需要设定channel                           <img src="https://api2.mubu.com/v3/document_image/dbd55875-0745-4b6a-804f-888d251c9580-3810853.jpg" alt="img">                                                 <img src="https://api2.mubu.com/v3/document_image/9c69e7bf-d5bc-4fe2-a04a-412c27040f23-3810853.jpg" alt="img">                            </li>
<li>通过notification.builder实例化</li>
<li>设定各种属性</li>
<li>设定一个PendingIntent绑定intent</li>
<li>通过notificationManiger的notify属性发送                            <img src="https://api2.mubu.com/v3/document_image/933ea260-40b1-43ff-ae26-1f4367a76655-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="broadcastreceiver"><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a>BroadcastReceiver</h1><ul>
<li><strong>发送</strong></li>
<li>写intent，设定action(字符串就好)</li>
<li>sendBroadCast（intent）</li>
<li><strong>接收</strong></li>
<li>继承BroadCastReceiver重写OnReceiver</li>
<li><strong>注册</strong></li>
<li>在manifest中注册</li>
<li>属性：name,enable.exported</li>
<li>过滤器：写action通过name过滤</li>
</ul>
<h1 id="alarmmaniger"><a href="#AlarmManiger" class="headerlink" title="AlarmManiger             "></a>AlarmManiger             <img src="https://api2.mubu.com/v3/document_image/c165b78d-5417-47bb-823c-5536425e6fd8-3810853.jpg" alt="img"></h1><p>思路</p>
<ul>
<li>在AlarmManiger中设定唤醒模式，唤醒时间，pendingIntent对象</li>
</ul>
<h1 id="画笔和布"><a href="#画笔和布" class="headerlink" title="画笔和布"></a>画笔和布</h1><ul>
<li>paint.set(AntiAlias)属性可以设置抗锯齿              <img src="https://api2.mubu.com/v3/document_image/5329a450-a8e6-4075-9002-a9f8aebb56df-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="绘制几何图形"><a href="#绘制几何图形" class="headerlink" title="绘制几何图形"></a>绘制几何图形</h1><ul>
<li>paint设定颜色、填充方式、等</li>
<li>cavans有很多类可以绘制各种图形</li>
<li>ReatF是用来设置偏移量的</li>
</ul>
<h1 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h1><ul>
<li>canvan.drawText</li>
</ul>
<h1 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h1><p>从SD卡中读取并绘制</p>
<ul>
<li>Everement.getExternalStorage+”/df.png”获取路径</li>
<li>通过BitmapFactory.decode将图片与bitmap实例绑定</li>
<li>也可通过实例bitmpa.createBitmap挖出一小块使用</li>
<li>canvans.drawBitmap()</li>
</ul>
<h1 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h1><ul>
<li>实例化Path</li>
<li>add设置路径以及位置</li>
<li>canvan.drawPath</li>
</ul>
<h1 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h1><ul>
<li>建立资源文件animation-list</li>
<li>设置item的drawble属性和duration属性</li>
<li>设置为某个控件的背景</li>
<li>通过AnimaitonDrawble和控件的getBackground进行实例化</li>
<li>amin.start()播放</li>
<li>amin.stop() 暂停</li>
</ul>
<h1 id="补间动画"><a href="#补间动画" class="headerlink" title="补间动画"></a>补间动画</h1><ul>
<li><p>动画类型都是在&lt;set&gt;标签中</p>
<p><img src="https://api2.mubu.com/v3/document_image/4b42fe1f-f6ff-41ac-9956-7f22b8ba8e69-3810853.jpg" alt="img">                            <strong>思路</strong></p>
</li>
<li><p>通过AnimationUtil.loading实例化animation</p>
</li>
<li><p>将它添加到相应的控件</p>
<p><strong>属性规律</strong></p>
</li>
<li><p>旋转和缩放都有个中心点的设置项</p>
</li>
</ul>
<h1 id="mediaplayer播放音频"><a href="#MediaPlayer播放音频" class="headerlink" title="MediaPlayer播放音频"></a>MediaPlayer播放音频</h1><p>​       <strong>creat()方法</strong></p>
<ul>
<li><p>直接设定音乐，通过start,pause,stop控制</p>
<p><strong>getSource路径、prepard预加载，start方法时</strong></p>
</li>
<li><p>在需要连续播放多个音频时</p>
</li>
<li><p>记得最后要进行release资源释放</p>
</li>
</ul>
<h1 id="soundpool播放短音频"><a href="#SoundPool播放短音频" class="headerlink" title="SoundPool播放短音频"></a>SoundPool播放短音频</h1><ul>
<li>实例化AudioAttribute设置应用场景，音效类型</li>
<li>实例化SoundPool设置音效池，以及最大音频数量</li>
<li>建Hashmap，key是序号，vlaue用Soundpool.load加载音频</li>
<li>通过soundPool.play播放指定的value的音乐</li>
</ul>
<h1 id="videoview播放视频"><a href="#VideoView播放视频" class="headerlink" title="VideoView播放视频"></a>VideoView播放视频</h1><ul>
<li>setVideoPath指定路径</li>
<li>setMedioController添加控制器（实例化一个默认的MedioController就好）</li>
<li>requstFocus获得焦点</li>
<li>start播放</li>
</ul>
<h1 id="mediaplayersurfaceview播放视频"><a href="#MediaPlayer-surfaceView播放视频" class="headerlink" title="MediaPlayer+surfaceView播放视频"></a>MediaPlayer+surfaceView播放视频</h1><ul>
<li>通过Surfacevie实例获得SurfaceHolder</li>
<li>通过medie.display(surfaceholder)将音频输出到surfaceview组件</li>
<li>其他步骤与播放音频一致</li>
</ul>
<h1 id="控制摄像头camera拍照"><a href="#控制摄像头Camera拍照" class="headerlink" title="控制摄像头Camera拍照"></a>控制摄像头Camera拍照</h1><p>​                         <img src="https://api2.mubu.com/v3/document_image/695fe40d-144b-4019-ad00-c7b88e565216-3810853.jpg" alt="img">                            </p>
<ul>
<li><strong>思路</strong></li>
<li>拍照窗口通过surfaceView显示</li>
<li>拍完的照片得用代码添加到系统图库并且通知系统，否则是无法看到的。</li>
</ul>
<h1 id="控制摄像头录制视频mediarecorder"><a href="#控制摄像头录制视频mediaRecorder" class="headerlink" title="控制摄像头录制视频mediaRecorder"></a>控制摄像头录制视频mediaRecorder</h1><ul>
<li>mediaRecorder                    <img src="https://api2.mubu.com/v3/document_image/f83b6cdb-943e-4954-bc05-b3e99fe80343-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="sharedpreference"><a href="#SharedPreference" class="headerlink" title="SharedPreference"></a>SharedPreference</h1><ul>
<li>存储数据（最后记得要commit）                   <img src="https://api2.mubu.com/v3/document_image/be3e2119-41c0-4392-9b86-447c35b3ab76-3810853.jpg" alt="img">                            </li>
<li>读取数据                  <img src="https://api2.mubu.com/v3/document_image/a48ebb7c-73dd-42ea-a4f2-834aff67c572-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="内部存储"><a href="#内部存储" class="headerlink" title="内部存储"></a>内部存储</h1><ul>
<li>openOutputStream/openInputStream                        <img src="https://api2.mubu.com/v3/document_image/0e6a82e2-a315-4187-8f4a-c987960db5d0-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h1><ul>
<li>不用openOutputStream而是直接new一个输出流</li>
<li>其他与每部存储一致</li>
</ul>
<h1 id="sqlite数据库"><a href="#sqlite数据库" class="headerlink" title="sqlite数据库"></a>sqlite数据库</h1><ul>
<li>继承SqLiteOpenHelper</li>
<li>重写oncreate和onupdate方法（游标工厂可以为空）</li>
<li>在oncreate初始化</li>
<li>在主类中通过上下文，数据库名，游标工厂（null）,版本号实例化</li>
<li>通过myhelper的getReadbleDatebase可以获得数据库对象</li>
<li>可以通过countentValue进行数据库数据插入，很方便</li>
<li>通过query写表名称，查询字段，以及查询字符串数据查询很方便</li>
</ul>
<h1 id="countentprovider"><a href="#countentProvider" class="headerlink" title="countentProvider"></a>countentProvider</h1><ul>
<li><strong>查询</strong></li>
<li>实例化CountentResolver</li>
<li>query方法结合URI获得cursor</li>
<li>遍历cursor</li>
</ul>
<h1 id="handler消息传递机制"><a href="#handler消息传递机制" class="headerlink" title="handler消息传递机制"></a>handler消息传递机制</h1><ul>
<li>在handler的handleMassage中给自己发消息可进行循环</li>
</ul>
<h1 id="message"><a href="#Message" class="headerlink" title="Message"></a>Message</h1><ul>
<li>sendMessageDelay可以延迟发送   <img src="https://api2.mubu.com/v3/document_image/372fef33-a965-431e-bb3b-092ec26338a7-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h1><ul>
<li>要用这两个方法把handler包装起来   <img src="https://api2.mubu.com/v3/document_image/c7e4c84d-d2ff-424e-8476-78ec7ae55a60-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="startservice"><a href="#startService" class="headerlink" title="startService"></a>startService</h1><ul>
<li>直接用intent的startService                     <img src="https://api2.mubu.com/v3/document_image/71972ba2-5c08-4959-858e-344eb7c0092f-3810853.jpg" alt="img">                            </li>
<li><strong>思路</strong></li>
<li>启动service就代表启动了某个动作</li>
<li>service销毁就代表停止了某个动作</li>
</ul>
<h1 id="bindservice"><a href="#bindService" class="headerlink" title="bindService"></a>bindService</h1><ul>
<li>生命周期                      <img src="https://api2.mubu.com/v3/document_image/3b6a8976-572b-4418-9e13-8818421eff19-3810853.jpg" alt="img">                            </li>
<li>基本步骤                      <img src="https://api2.mubu.com/v3/document_image/948cbf1b-60d8-4341-ade7-b70f593be337-3810853.jpg" alt="img">                            </li>
<li><strong>思路</strong></li>
<li>/service中</li>
<li>写一个内部类继承Binder</li>
<li>写一个获得BindService的方法</li>
<li>在IBindere中返回这个内部类</li>
<li>/activity中</li>
<li>实例化serviceConnection获取到BundService</li>
<li>可以通过BundService调用服务中的所有方法</li>
</ul>
<h1 id="intentservice"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h1><ul>
<li><p>区别</p>
<p><img src="https://api2.mubu.com/v3/document_image/863e5043-473a-461a-a9e7-1c5e546f4c6d-3810853.jpg" alt="img">                            </p>
</li>
<li><p><strong>思路</strong></p>
</li>
<li><p>区别在于耗时操作时，自动开启子线程运行</p>
</li>
<li><p>运行完还会自动销毁</p>
</li>
</ul>
<h1 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h1><ul>
<li>步骤                       <img src="https://api2.mubu.com/v3/document_image/531d9b9f-f0c5-410c-b811-43f6f7632793-3810853.jpg" alt="img">                            </li>
<li> 监听                             <img src="https://api2.mubu.com/v3/document_image/fa1b2fd6-9846-4dde-9326-0d5ce707dabd-3810853.jpg" alt="img">                            </li>
<li><strong>思路</strong></li>
<li>继承sensorEventListener重写两个方法</li>
<li>在onresum方法中注册传感器（注册时指定注册的是什么传感器）</li>
<li>在onpuase方法解除注册</li>
<li>在重写方法中可以用event获取传感器数据</li>
</ul>
<h1 id="locationprovider"><a href="#LocationProvider" class="headerlink" title="LocationProvider"></a>LocationProvider</h1><ul>
<li><p>所有获得方式</p>
<p><img src="https://api2.mubu.com/v3/document_image/34fed4b5-3ba8-4709-ab1b-2b6959e3867b-3810853.jpg" alt="img">                            </p>
</li>
<li><p>获取所有可用的定位服务</p>
<p><img src="https://api2.mubu.com/v3/document_image/dfef465c-2867-4ec5-9372-f2e8e3c333bb-3810853.jpg" alt="img">                            </p>
</li>
<li><p>获取指定的</p>
<p><img src="https://api2.mubu.com/v3/document_image/53a06133-374b-482c-9edb-453cd7a2dc02-3810853.jpg" alt="img">                            </p>
</li>
<li><p>通过过滤获得最佳的</p>
<p><img src="https://api2.mubu.com/v3/document_image/46167160-d3e3-4bd3-afa5-c4c6b322f228-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="获取定位信息"><a href="#获取定位信息" class="headerlink" title="获取定位信息"></a>获取定位信息</h1><ul>
<li><p>步骤</p>
<p><img src="https://api2.mubu.com/v3/document_image/10aa99d6-7aaf-4f61-96fe-8c4065b13c89-3810853.jpg" alt="img">                            </p>
</li>
<li><p>//locationManiger配置</p>
<p><img src="https://api2.mubu.com/v3/document_image/947576bd-d234-4211-9cc4-3b8f8c97ab6a-3810853.jpg" alt="img">                            </p>
</li>
<li><p>获取最新位置</p>
<p>​        <img src="https://api2.mubu.com/v3/document_image/36767559-772d-40e2-9b8b-1d5c83ee692f-3810853.jpg" alt="img">                            </p>
</li>
<li><p>通过location获取经纬度</p>
<p>​    <img src="https://api2.mubu.com/v3/document_image/ededb9cd-0ba3-4308-9625-77e041835849-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="获得指纹证书"><a href="#获得指纹证书" class="headerlink" title="获得指纹证书"></a>获得指纹证书</h1><ul>
<li><p>获得指纹证书  </p>
<p>​    <img src="https://api2.mubu.com/v3/document_image/af00f240-7b79-4e4a-a09b-dae5974c9b7a-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h1><ul>
<li>获取API密钥</li>
<li>下载百度地图SDK的lib</li>
<li>导入项目的lib,并右键为aslib</li>
<li>在main中创建jniLibs目录，把和jar包一起下的文件复制进去</li>
<li>声明需要的权限（官网找）</li>
<li>注明密钥<ul>
<li>​                                <img src="https://api2.mubu.com/v3/document_image/1a84510a-9cb1-43ef-a0d8-3dc7dd40288f-3810853.jpg" alt="img">                            </li>
</ul>
</li>
<li>在mainActivity初始化SDK<ul>
<li>​                                <img src="https://api2.mubu.com/v3/document_image/ed61d8b5-8523-4daa-a2b9-8f039374a6d6-3810853.jpg" alt="img">                            </li>
</ul>
</li>
<li>在activity的生命周期中调用相应的方法</li>
</ul>
<h1 id="定位我的位置"><a href="#定位我的位置" class="headerlink" title="定位我的位置"></a>定位我的位置</h1><ul>
<li>主要是通过定位图层           <img src="https://api2.mubu.com/v3/document_image/4c9b2952-a20c-4e53-aa50-75e7d133fe76-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="-补充"><a href="#———-补充———–" class="headerlink" title="———-补充———–"></a>———-补充———–</h1><h1 id="底部导航栏"><a href="#底部导航栏" class="headerlink" title="底部导航栏"></a>底部导航栏</h1><ul>
<li>编写xml控件</li>
<li>编写一个menu.xml<ul>
<li>&lt;item&gt;</li>
<li>包含id、图片、标题</li>
</ul>
</li>
<li>编写一个navigation.xml<ul>
<li>&lt;fragment&gt;</li>
<li>包含id,name,label,layout</li>
<li>id和上面menu的一致</li>
<li>name为相应的Fragment类</li>
<li>layout分别为fragment布局文件</li>
</ul>
</li>
<li>动态配置<ul>
<li>将之前写的id添加进去                            <img src="https://api2.mubu.com/v3/document_image/bd187a03-d824-4db6-a127-c630cc5ff684-3810853.jpg" alt="img">                                        </li>
<li>找到主类中的fragment作为navcontroller          <img src="https://api2.mubu.com/v3/document_image/482eded1-358f-4790-8b10-1e085f81fadb-3810853.jpg" alt="img">                                        </li>
<li>将之前的id和BottomNavigation与navcontroller绑定在一起</li>
</ul>
</li>
</ul>
<h1 id="侧部导航栏"><a href="#侧部导航栏" class="headerlink" title="侧部导航栏"></a>侧部导航栏</h1><ul>
<li><p>用DrawerLayout进行主类布局</p>
</li>
<li><p>在最底下写一个navigationView</p>
<ul>
<li><p>指定头部布局和选项的menu</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/c9d073a1-9bde-4942-8b02-303d2c80aeea-3810853.jpg" alt="img">                                        </p>
</li>
</ul>
</li>
<li><p>写一个布局文件作为navigationview的Header</p>
</li>
<li><p>写menu.xml</p>
<ul>
<li><p>用group在最外层包裹一下</p>
<p>   <img src="https://api2.mubu.com/v3/document_image/5882d7df-0577-4fbd-8478-9f632e0805cd-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>item属性和底部导航栏一样</p>
<p>​    <img src="https://api2.mubu.com/v3/document_image/a2a7bafb-5f94-4732-8a96-4428f71ad8cb-3810853.jpg" alt="img">                                        </p>
</li>
</ul>
</li>
<li><p>写一个navigation.xml</p>
<p>   <img src="https://api2.mubu.com/v3/document_image/c74e0dc0-a219-492a-bcfd-1e77f8a20523-3810853.jpg" alt="img">                            </p>
<ul>
<li>记得id和上面的menu中的id一致</li>
</ul>
</li>
<li><p>动态配置</p>
<ul>
<li><p>与底部导航栏的步骤一致</p>
<p><img src="https://api2.mubu.com/v3/document_image/edcbc1ba-abff-43a9-875c-e6e5f166906c-3810853.jpg" alt="img">                                        </p>
</li>
</ul>
</li>
<li><p>重写onsuppertNavigationUp</p>
<ul>
<li>点击调出左侧菜单栏的意思      <img src="https://api2.mubu.com/v3/document_image/e1b9bcd8-12a5-4c3d-a615-9db27cb7a8c1-3810853.jpg" alt="img">                                        </li>
</ul>
</li>
</ul>
<h1 id="享学"><a href="#———享学——–" class="headerlink" title="———享学——–"></a>———享学——–</h1><h1 id="recyclerview"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h1><ul>
<li><p>添加依赖包</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/6658b4e0-3ab4-4f40-b6a9-711384622ea9-3810853.jpg" alt="img">                            </p>
</li>
<li><p>布局使用</p>
<p>​     <img src="https://api2.mubu.com/v3/document_image/ffb205f6-40ea-4764-a15a-8e57d32816a9-3810853.jpg" alt="img">                            </p>
</li>
<li><p>创建自定义adpater</p>
<ul>
<li><p>继承泛型的adapter         <img src="https://api2.mubu.com/v3/document_image/c22e60fa-ac57-4430-93ad-70d9832e9e88-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>构造方法</p>
<p> <img src="https://api2.mubu.com/v3/document_image/f26f08ec-1065-435e-8ab5-9c334a336635-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>绑定视图      <img src="https://api2.mubu.com/v3/document_image/e98c5631-406d-4682-b7e9-81b49fc2006e-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>寻找视图         <img src="https://api2.mubu.com/v3/document_image/93b3df01-40a5-4268-a3d6-e6d0af749606-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>设置数据                     <img src="https://api2.mubu.com/v3/document_image/0b8cd238-5572-4e29-9de6-d3929186f623-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>设置数据数量                 <img src="https://api2.mubu.com/v3/document_image/78d93bcd-0fea-4560-8aa5-1d732dbee9da-3810853.jpg" alt="img">                                        </p>
</li>
</ul>
</li>
<li><p>设置布局</p>
<ul>
<li>线性布局                        <img src="https://api2.mubu.com/v3/document_image/9b047589-daee-4d89-8100-b04d516933a3-3810853.jpg" alt="img">                                        </li>
<li>网格布局                         <img src="https://api2.mubu.com/v3/document_image/b9e26623-4cf3-4f00-888b-061222f17d31-3810853.jpg" alt="img">                                        </li>
<li>瀑布流布局（高低不同会补充空格）                   <img src="https://api2.mubu.com/v3/document_image/e827ba5b-58f8-4cda-bf62-6ab99efe97b2-3810853.jpg" alt="img">                                        </li>
</ul>
</li>
<li><p>设置监听</p>
<ul>
<li>创建监听接口，并创建设置方法           <img src="https://api2.mubu.com/v3/document_image/75285f4f-59bc-4f84-803e-152e90526982-3810853.jpg" alt="img">                                        </li>
<li>在MyViewHolder中创建点击监听，并回调接口         <img src="https://api2.mubu.com/v3/document_image/7826096f-789a-4fe3-9bc0-e77aa9edbf91-3810853.jpg" alt="img">                                        </li>
<li>在主方法中使用               <img src="https://api2.mubu.com/v3/document_image/054c5589-bf62-4ae2-a07b-a23ee31f212f-3810853.jpg" alt="img">                                        </li>
</ul>
</li>
</ul>
<h1 id="viewpager"><a href="#ViewPager" class="headerlink" title="ViewPager"></a>ViewPager</h1><ul>
<li><p>将布局视图集合传进自定义Adapter</p>
<p><img src="https://api2.mubu.com/v3/document_image/34818e4a-d6dc-4b6b-8c1e-82ef83db9602-3810853.jpg" alt="img">                            </p>
</li>
<li><p>自定义Adapter</p>
<ul>
<li><p>总览                     <img src="https://api2.mubu.com/v3/document_image/f550c990-a6c8-40cf-8918-fdd58bfd881f-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>继承</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/3f3dfd26-6286-436c-a4e2-935f56fdf2e7-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>构造方法</p>
<p>   <img src="https://api2.mubu.com/v3/document_image/8732ed7f-8579-482f-acde-cfa0c2bfbba0-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>设置数量</p>
<p>   <img src="https://api2.mubu.com/v3/document_image/87952ac8-2dc5-4394-aedf-1a27ef342672-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>添加视图，并返回                 <img src="https://api2.mubu.com/v3/document_image/31cfc155-3c9f-42c9-9057-09e0d01be0a1-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>判断视图的key是否正确</p>
<p><img src="https://api2.mubu.com/v3/document_image/52db49c2-149d-4f6a-806f-62be7effdc39-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>删除视图                   <img src="https://api2.mubu.com/v3/document_image/fb6b48bf-2fa7-4d16-bb84-dc20f3cf8aa4-3810853.jpg" alt="img"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>笔记Android</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo目录问题</title>
    <url>/2021/07/04/hexo%E7%9B%AE%E5%BD%95%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="没有href"><a href="#没有href" class="headerlink" title="没有href"></a>没有href</h1><p><strong>解决：</strong><br>进入项目根目录的 <code>node_modules\hexo-toc\lib\filter.js</code> 中，把 28 行～31 行修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$title.attr(&#39;id&#39;, id);</span><br><span class="line">&#x2F;&#x2F; $title.children(&#39;a&#39;).remove();</span><br><span class="line">&#x2F;&#x2F; $title.html( &#39;&lt;span id&#x3D;&quot;&#39; + id + &#39;&quot;&gt;&#39; + $title.html() + &#39;&lt;&#x2F;span&gt;&#39; );</span><br><span class="line">&#x2F;&#x2F; $title.removeAttr(&#39;id&#39;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="中文链接无法跳转"><a href="#中文链接无法跳转" class="headerlink" title="中文链接无法跳转"></a>中文链接无法跳转</h1><p>找到发生错误的文件夹，修改对应位置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两行代码：</span><br><span class="line"></span><br><span class="line">var target &#x3D; document.getElementById(decodeURI(link.getAttribute(&#39;href&#39;)).replace(&#39;#&#39;, &#39;&#39;));</span><br><span class="line"></span><br><span class="line">return target;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理笔记</title>
    <url>/2021/07/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="编译原理笔记一"><a href="#编译原理笔记（一）" class="headerlink" title="编译原理笔记（一）"></a>编译原理笔记（一）</h1><blockquote>
<p>视频地址：<a href="https://www.bilibili.com/video/BV1ft4y1X7p6">https://www.bilibili.com/video/BV1ft4y1X7p6</a></p>
</blockquote>
<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="编译程序的逻辑结构"><a href="#编译程序的逻辑结构" class="headerlink" title="编译程序的逻辑结构"></a>编译程序的逻辑结构</h2><p><img src="https://api2.mubu.com/v3/document_image/b585f60e-9d28-461f-b263-362a7ef7080c-3810853.jpg" alt="img">                            </p>
<a id="more"></a>

<h1 id="前后文无关文法及语言"><a href="#前后文无关文法及语言" class="headerlink" title="前后文无关文法及语言"></a>前后文无关文法及语言</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li><img src="https://api2.mubu.com/v3/document_image/09f55553-d480-48c4-b2b3-9eaf0b8ff2af-3810853.jpg" alt="img">                            </li>
</ul>
<h2 id="文法推导"><a href="#文法推导" class="headerlink" title="文法推导                         "></a>文法推导                         <img src="https://api2.mubu.com/v3/document_image/be93ec59-c212-409b-a4c9-ae9a01aaa676-3810853.jpg" alt="img"></h2><h2 id="语法树最左推导最右推导"><a href="#语法树，最左推导，最右推导" class="headerlink" title="语法树，最左推导，最右推导"></a>语法树，最左推导，最右推导</h2><p><img src="https://api2.mubu.com/v3/document_image/66f4533b-dfbe-4143-9777-f386277727f3-3810853.jpg" alt="img">                                             <img src="https://api2.mubu.com/v3/document_image/85d793a7-98b9-4340-98d0-642c2844f01d-3810853.jpg" alt="img">                            </p>
<h2 id="二义性和无二性"><a href="#二义性和无二性" class="headerlink" title="二义性和无二性                            "></a>二义性和无二性                            <img src="https://api2.mubu.com/v3/document_image/2003652e-c33e-49d4-a28f-a95bb20872c4-3810853.jpg" alt="img"></h2><h2 id="短语句柄"><a href="#短语句柄" class="headerlink" title="短语句柄                                                                             "></a>短语句柄                 <img src="https://api2.mubu.com/v3/document_image/969ce91d-f9c0-4d87-b9ae-f87d3015639c-3810853.jpg" alt="img">                                                            <img src="https://api2.mubu.com/v3/document_image/be4a2a58-4fc4-45f9-bb7c-dfd98a2073dc-3810853.jpg" alt="img"></h2><h2 id="化简文法产生式"><a href="#化简文法产生式" class="headerlink" title="化简文法产生式                                    "></a>化简文法产生式                                    <img src="https://api2.mubu.com/v3/document_image/4e0cb7aa-6457-440d-b573-37b6c6ae1ba3-3810853.jpg" alt="img"></h2><h1 id="词法分析及词法分析程序"><a href="#词法分析及词法分析程序" class="headerlink" title="词法分析及词法分析程序"></a>词法分析及词法分析程序</h1><h2 id="状态转换图推导文法右线性文法"><a href="#状态转换图推导文法（右线性文法）" class="headerlink" title="状态转换图推导文法（右线性文法）"></a>状态转换图推导文法（右线性文法）</h2><p>​                               <img src="https://api2.mubu.com/v3/document_image/bbf6b82d-f4a1-46a0-9751-1f4f925ff4dd-3810853.jpg" alt="img">                            </p>
<h2 id="输入串"><a href="#输入串" class="headerlink" title="输入串                     "></a>输入串                     <img src="https://api2.mubu.com/v3/document_image/0ebd5d2c-cdca-44bc-ab4b-131847f40e23-3810853.jpg" alt="img"></h2><h2 id="状态转换矩阵3型文法右线性文法"><a href="#状态转换矩阵，3型文法（右线性文法）" class="headerlink" title="状态转换矩阵，3型文法（右线性文法）                                "></a>状态转换矩阵，3型文法（右线性文法）                                <img src="https://api2.mubu.com/v3/document_image/7f245c76-189f-407a-8edf-2376da26e75e-3810853.jpg" alt="img"></h2><h2 id="nfa确定化和最小化"><a href="#NFA确定化和最小化" class="headerlink" title="NFA确定化和最小化                  "></a>NFA确定化和最小化                  <img src="https://api2.mubu.com/v3/document_image/b9d68031-e16c-446a-899d-799c8984a673-3810853.jpg" alt="img"></h2><ul>
<li>解法                           <img src="https://api2.mubu.com/v3/document_image/f283e22d-1808-41f2-ac1d-913be28c2092-3810853.jpg" alt="img">                            </li>
<li>具有空元素的NFA确定化和最小化                                <img src="https://api2.mubu.com/v3/document_image/176b2885-511f-483a-98b6-a63d80e73de2-3810853.jpg" alt="img">                            </li>
</ul>
<h2 id="dfa最小化"><a href="#DFA最小化" class="headerlink" title="DFA最小化                                "></a>DFA最小化                                <img src="https://api2.mubu.com/v3/document_image/c6ecd220-4b4c-49df-bd54-d8776b3a30b1-3810853.jpg" alt="img"></h2><h2 id="正规式转nfa转dfa"><a href="#正规式转NFA转DFA" class="headerlink" title="正规式转NFA转DFA"></a>正规式转NFA转DFA</h2><ul>
<li><p>正规式的概念                                <img src="https://api2.mubu.com/v3/document_image/a822de93-0bf0-40c8-a2de-bb6610f446a9-3810853.jpg" alt="img">                            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A本身的回旋可以以B为中介对中间的式子进行分解处理</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>解                                <img src="https://api2.mubu.com/v3/document_image/f575096d-2953-4d58-b476-e151d168bb0a-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="语法分析与语法分析程序"><a href="#语法分析与语法分析程序" class="headerlink" title="语法分析与语法分析程序"></a>语法分析与语法分析程序</h1><ul>
<li>自顶向下，子底向上                             <img src="https://api2.mubu.com/v3/document_image/4e4a3fd5-243f-4b06-b6a1-a16bb164a3de-3810853.jpg" alt="img">                            </li>
</ul>
<h2 id="消除左递归"><a href="#消除左递归" class="headerlink" title="消除左递归"></a>消除左递归</h2><ul>
<li>解                                <img src="https://api2.mubu.com/v3/document_image/bc74761c-d9b4-46a4-b1f4-ef229c4e6233-3810853.jpg" alt="img">                            </li>
</ul>
<h2 id="fllow集和first集"><a href="#FLLOW集和FIRST集" class="headerlink" title="FLLOW集和FIRST集"></a>FLLOW集和FIRST集</h2><ul>
<li>解                                <img src="https://api2.mubu.com/v3/document_image/41acbe2b-4f12-4df2-ade9-ed67f865e4ad-3810853.jpg" alt="img">                            </li>
<li>规律                                <img src="https://api2.mubu.com/v3/document_image/101c90b3-7679-4121-81a2-551baf6eb466-3810853.jpg" alt="img">                            </li>
</ul>
<h2 id="判断ll1文法"><a href="#判断LL1文法" class="headerlink" title="判断LL1文法"></a>判断LL1文法</h2><ul>
<li>解                                <img src="https://api2.mubu.com/v3/document_image/9764e0ab-bd10-4235-aec5-fb4d24c5ddb9-3810853.jpg" alt="img">                            </li>
</ul>
<h2 id="构造ll1分法及其分析表"><a href="#构造LL1分法及其分析表" class="headerlink" title="构造LL1分法及其分析表"></a>构造LL1分法及其分析表</h2><ul>
<li> 解：                                <img src="https://api2.mubu.com/v3/document_image/f636c4c0-67b1-4a9a-b766-dbe9e7915971-3810853.jpg" alt="img">                            </li>
</ul>
<h2 id="lr0文法项目集规范组"><a href="#LR0文法项目集规范组" class="headerlink" title="LR0文法项目集规范组"></a>LR0文法项目集规范组</h2><ul>
<li>LR0文法相关概念                                <img src="https://api2.mubu.com/v3/document_image/2e7802ef-0352-4386-88f0-06770b7791e4-3810853.jpg" alt="img">                            </li>
<li>识别活前缀自动机                                <img src="https://api2.mubu.com/v3/document_image/18849b60-5f5a-44d1-b21a-34800d665304-3810853.jpg" alt="img">                            </li>
<li>LR0分析表                                <img src="https://api2.mubu.com/v3/document_image/e6fbb973-3aae-4da9-bb3c-33bbcd799baa-3810853.jpg" alt="img">                            </li>
</ul>
<h2 id="lr0文法判断以及分析表"><a href="#LR0文法判断以及分析表" class="headerlink" title="LR0文法判断以及分析表"></a>LR0文法判断以及分析表</h2><ul>
<li>题                                <img src="https://api2.mubu.com/v3/document_image/d9cbb6e8-7efe-4dfd-85fd-5d16ca07b9a9-3810853.jpg" alt="img">                            </li>
<li>解                                <img src="https://api2.mubu.com/v3/document_image/b7304e8a-ad45-487b-8b2a-0ed98e709c41-3810853.jpg" alt="img">                            </li>
</ul>
<h2 id="判断sl1文法"><a href="#判断SL1文法" class="headerlink" title="判断SL1文法"></a>判断SL1文法</h2><ul>
<li> 题解一                                <img src="https://api2.mubu.com/v3/document_image/cf43f552-4bba-4a78-af18-8f6d980a7a0c-3810853.jpg" alt="img">                            </li>
<li>题解二                                <img src="https://api2.mubu.com/v3/document_image/f28ca9a0-e1de-4b6a-b1df-7719f0804156-3810853.jpg" alt="img">                            </li>
</ul>
<h2 id="lr1文法"><a href="#LR1文法" class="headerlink" title="LR1文法"></a>LR1文法</h2><ul>
<li>概念                                <img src="https://api2.mubu.com/v3/document_image/c67eebae-de5f-495b-adda-7e7f4928eaed-3810853.jpg" alt="img">                            </li>
<li>画DFA自动机                                <img src="https://api2.mubu.com/v3/document_image/6587af56-2912-4008-8f0c-5e7e9f9e4938-3810853.jpg" alt="img">                            </li>
<li>LR1分析表                                <img src="https://api2.mubu.com/v3/document_image/064fc558-678b-4b7a-ad97-010697dde068-3810853.jpg" alt="img">                            </li>
<li>输入abab分析过程                                <img src="https://api2.mubu.com/v3/document_image/e4a5fc05-7494-451b-bc05-e7e9caefba87-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="语法制导翻译"><a href="#语法制导翻译" class="headerlink" title="语法制导翻译"></a>语法制导翻译</h1><h2 id="四元式翻译"><a href="#四元式翻译" class="headerlink" title="四元式翻译"></a>四元式翻译</h2><ul>
<li>赋值语句翻译成四元式序列                                <img src="https://api2.mubu.com/v3/document_image/2151aa69-28f7-442e-97e4-dc30c3ee7857-3810853.jpg" alt="img">                            </li>
<li>布尔表达式翻译成四元式序列                                <img src="https://api2.mubu.com/v3/document_image/740e7a2f-9f19-4d42-8d03-73cad6eef008-3810853.jpg" alt="img">                            </li>
<li>代码翻译成四元式序列                                <img src="https://api2.mubu.com/v3/document_image/a6ccb0f8-d639-44a2-a06a-4a9144bf1dc4-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="编译原理笔记二"><a href="#编译原理笔记（二）" class="headerlink" title="编译原理笔记（二）"></a>编译原理笔记（二）</h1><blockquote>
<p> 视频地址：<a href="https://www.bilibili.com/video/BV1Ar4y1M7vG">https://www.bilibili.com/video/BV1Ar4y1M7vG</a></p>
</blockquote>
<h1 id="绪论"><a href="#绪论-1" class="headerlink" title="绪论"></a>绪论</h1><ul>
<li>大纲：                                <img src="https://api2.mubu.com/v3/document_image/fcb7f8b7-ae2d-4342-be86-cbca3f02e57b-3810853.jpg" alt="img">                            </li>
</ul>
<h1 id="上下文无关文法amp语法分析树"><a href="#上下文无关文法-amp-语法分析树" class="headerlink" title="上下文无关文法&amp;语法分析树"></a>上下文无关文法&amp;语法分析树</h1><ul>
<li><p>文法的四个组成部分                                <img src="https://api2.mubu.com/v3/document_image/9e6d8d9b-050b-49a8-a389-d03551d3d7db-3810853.jpg" alt="img">                            </p>
</li>
<li><p>例题 </p>
<p> <img src="https://api2.mubu.com/v3/document_image/c9ce6bd7-1da2-4b4b-8487-6f971d6af886-3810853.jpg" alt="img">                            </p>
<p>运算符也用非终结符表示</p>
</li>
<li><p>两个语法树                               <img src="https://api2.mubu.com/v3/document_image/621a56ea-0538-4715-bf7e-e3b270dd52e2-3810853.jpg" alt="img">                            </p>
</li>
<li><p>最左推导\最右推导</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/b24bb9cf-c693-42d9-bf06-4c5725efc877-3810853.jpg" alt="img">                            </p>
</li>
</ul>
<h1 id="状态转换图ampnfa的确定化"><a href="#状态转换图-amp-NFA的确定化" class="headerlink" title="状态转换图&amp;NFA的确定化"></a>状态转换图&amp;NFA的确定化</h1><ul>
<li><p>状态转换图</p>
<p> <img src="https://api2.mubu.com/v3/document_image/5876fd0b-cce4-4729-970c-b0e7d168f49e-3810853.jpg" alt="img">                            </p>
</li>
<li><p>DFA确定有限自动机</p>
<p>   <img src="https://api2.mubu.com/v3/document_image/f586ad92-6907-42ff-b5fb-39de169cbc2b-3810853.jpg" alt="img">                            </p>
<ul>
<li>0：表示状态集</li>
<li>1:    输入符号集</li>
<li>2：映射</li>
<li>3：初始状态</li>
<li>4：最终状态</li>
</ul>
</li>
<li><p>DFA的状态转换矩阵                                <img src="https://api2.mubu.com/v3/document_image/2130d06e-d17f-4b1c-ac91-a7061cd1d1c5-3810853.jpg" alt="img">                            </p>
</li>
<li><p>NFA确定化</p>
<ul>
<li><p>简化                                            <img src="https://api2.mubu.com/v3/document_image/edf8fb7d-5039-4725-93b8-795b048def58-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>画图</p>
<p>​     <img src="https://api2.mubu.com/v3/document_image/7f817145-0553-41f7-823e-5c19f0c857ca-3810853.jpg" alt="img">                                        </p>
</li>
</ul>
</li>
</ul>
<h1 id="ll1文法和预测分析表的构造"><a href="#LL1文法和预测分析表的构造" class="headerlink" title="LL1文法和预测分析表的构造"></a>LL1文法和预测分析表的构造</h1><ul>
<li><p>什么是LL1文法</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/ce7a94b1-677f-41b5-82dc-57ef5f737653-3810853.jpg" alt="img">                            </p>
</li>
<li><p>LL1文法的规则</p>
<ul>
<li><p>不含左递归（需要消除左递归）                                            <img src="https://api2.mubu.com/v3/document_image/39f95746-1b5a-454f-bd91-da82e8f18a8a-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>产生式首符集不相交                                            <img src="https://api2.mubu.com/v3/document_image/ae9da320-1075-46bb-991f-f9629635a848-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>FIRST和FOLLOW不相交                                            <img src="https://api2.mubu.com/v3/document_image/b2c3b67a-708a-498d-bb59-a5dc700de7ed-3810853.jpg" alt="img">                                        <img src="C:\Users\Justdoit\AppData\Roaming\Typora\typora-user-images\image-20210708100459792.png" alt="image-20210708100459792"></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>例题</p>
<p>​    <img src="https://api2.mubu.com/v3/document_image/bbaef70f-8d57-4f59-bee1-e3827ef77620-3810853.jpg" alt="img">                            </p>
<ul>
<li><p>消除左递归</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/ace5baa0-fa68-414e-acd0-5fc8f796b091-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>列出FIRST和FOLLOW                                            <img src="https://api2.mubu.com/v3/document_image/80e8eb02-601c-4138-b2ba-d357c14e82dd-3810853.jpg" alt="img">                                        </p>
<ul>
<li>FIRST:从推导条件入手，找到最后的元素的FIRST,传染给前面的所有父母</li>
<li>FOLLOW:从结果入手，找到元素的FOLLOW，在把这些元素传染给所有孩子。</li>
<li>注：如果找到的元素的FOLLOW不是运算符而是另一个元素，则要把这个另一个元素的所有FIRST写入该元素FOLLOW中</li>
</ul>
</li>
<li><p>写出预测分析表                                            <img src="https://api2.mubu.com/v3/document_image/9cab5771-9db2-4710-91fa-e4c54cfdfb1b-3810853.jpg" alt="img">                                        </p>
<ul>
<li><p>方法</p>
<ul>
<li><p>把FIRST集包含的全部填上</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/fe421731-c863-4111-813b-94b28e73f140-3810853.jpg" alt="img">                                                                </p>
</li>
<li><p>对于新产生的需要补上</p>
<p>​    <img src="https://api2.mubu.com/v3/document_image/5b663e2f-ff5d-44f3-bbe6-7e41847f10d1-3810853.jpg" alt="img">                                                                </p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="自下而上分析法lr分析法"><a href="#自下而上分析法（LR分析法）" class="headerlink" title="自下而上分析法（LR分析法）"></a>自下而上分析法（LR分析法）</h1><ul>
<li><p>LR分析法</p>
<p>​     <img src="https://api2.mubu.com/v3/document_image/a86f3537-9176-4c3e-8f84-d017e94aa190-3810853.jpg" alt="img">                            </p>
</li>
<li><p>LR方法的基本思想</p>
<p>​    <img src="https://api2.mubu.com/v3/document_image/6560bb03-ca4f-4090-ac1a-083f3319fe85-3810853.jpg" alt="img">                            </p>
</li>
<li><p>例题</p>
<p>   <img src="https://api2.mubu.com/v3/document_image/d61cfff2-85f1-4e21-a36f-3fbd45c930e0-3810853.jpg" alt="img">                            </p>
<p>S’是我们额外加上去的</p>
</li>
<li><p>文法的项目</p>
<p>​    <img src="https://api2.mubu.com/v3/document_image/6523c6da-586c-4299-9608-58e7fe11454f-3810853.jpg" alt="img">                            </p>
<p>左（中）右“加点”即可</p>
</li>
<li><p>构造I的闭包</p>
<p> <img src="https://api2.mubu.com/v3/document_image/84c73c29-4193-41a6-91d2-3fd9f4a74907-3810853.jpg" alt="img">                            </p>
<ul>
<li><p>I0</p>
<p> <img src="https://api2.mubu.com/v3/document_image/fd87e014-86e0-42c7-a2d9-28ce5d3c21e6-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>GO函数</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/70d9ebaa-603e-4124-8bf6-476f2d748c60-3810853.jpg" alt="img">                                        </p>
<p>   <img src="https://api2.mubu.com/v3/document_image/a0c90444-5904-4971-8a18-28177681f110-3810853.jpg" alt="img">                                        </p>
<p>  <img src="https://api2.mubu.com/v3/document_image/43d5423c-e5f9-4166-9c28-8e711d730a22-3810853.jpg" alt="img">                                        </p>
</li>
</ul>
</li>
</ul>
<h1 id="自下而上分析法lr0文法"><a href="#自下而上分析法（LR0文法）" class="headerlink" title="自下而上分析法（LR0文法）"></a>自下而上分析法（LR0文法）</h1><ul>
<li><p>不存在移进-归约冲突称LR（0）文法，若存在若存在移进-归约冲突，并能解决称SLR(1)文法</p>
<p>​      <img src="https://api2.mubu.com/v3/document_image/8fa8f0c0-427f-4046-a64c-faaee240ba7c-3810853.jpg" alt="img">                            </p>
<p> <img src="https://api2.mubu.com/v3/document_image/2717387d-07e0-4aae-8699-6d631e78103e-3810853.jpg" alt="img">                            </p>
</li>
<li><p>例题</p>
<p>  <img src="https://api2.mubu.com/v3/document_image/05bda288-ccaf-4108-a545-1ca6eab4ab50-3810853.jpg" alt="img">                            </p>
<ul>
<li><p>排序（这里应该从0开始）</p>
<p> <img src="https://api2.mubu.com/v3/document_image/7be22de4-f8e0-46a2-a046-3266b3f3a816-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>GO函数</p>
<p>   <img src="https://api2.mubu.com/v3/document_image/ea954c86-fb57-4f03-8ed0-5c5a34fbcaee-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>活前缀自动机</p>
<p>   <img src="https://api2.mubu.com/v3/document_image/1274a76b-df4c-41d1-b811-e5673add68f7-3810853.jpg" alt="img">                                        </p>
</li>
<li><p>状态分析表</p>
<ul>
<li><p>rj和sj                                                       <img src="https://api2.mubu.com/v3/document_image/5286f386-7602-42d0-8524-e71caaf3f1bd-3810853.jpg" alt="img">                                                    </p>
</li>
<li><p>第一步S’-&gt;E·归约</p>
<p> <img src="https://api2.mubu.com/v3/document_image/80e3d427-b639-4de5-a152-3dc2e4710074-3810853.jpg" alt="img">                                                    </p>
<p>  <img src="https://api2.mubu.com/v3/document_image/bd16ab8a-9d31-412f-ae29-14777ae1bf3a-3810853.jpg" alt="img">                                                    </p>
<p>在状态1的空上写acc</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="自下而上分析法lr0文法和slr1文法状态转换图"><a href="#自下而上分析法（LR-0-文法和SLR-1-文法状态转换图）" class="headerlink" title="自下而上分析法（LR(0)文法和SLR(1)文法状态转换图）"></a>自下而上分析法（LR(0)文法和SLR(1)文法状态转换图）</h1><ul>
<li>LR(0)分析表                                <img src="https://api2.mubu.com/v3/document_image/eff29abc-4e8a-4356-9fac-be0c941f0977-3810853.jpg" alt="img">                            <ul>
<li>找归约                                            <img src="https://api2.mubu.com/v3/document_image/1207b509-6022-40a0-9020-c20198c4f562-3810853.jpg" alt="img">                                        <ul>
<li>最初归约在对应的I的#字符上填acc</li>
<li>后面的在GO函数包含元素的对应的位置填I的序数（终结符用Sj,非终结符直接填数字）</li>
<li>在归约所在的GO函数对应的状态上（仅在终结符下）补充上归约项目的序数用rj</li>
</ul>
</li>
</ul>
</li>
<li>SRL(1)分析表                               <img src="https://api2.mubu.com/v3/document_image/5e6710dd-2036-4ded-a5a5-577354d1b166-3810853.jpg" alt="img">                            <ul>
<li>前面步骤和LR(0)分析表一致</li>
<li>在补充归约项目时，只在归约所对应的FOLLOW所包含的终结符下补充rj,如果点在终结符后面，通过FOLLOW判断的原则判断即可。                                            <img src="https://api2.mubu.com/v3/document_image/7d83cb66-5c16-4bd1-93b4-8880c864c299-3810853.jpg" alt="img">                                        </li>
</ul>
</li>
</ul>
<h1 id="如何判断移进-归约冲突能否解决即符合slr1文法"><a href="#如何判断移进-归约冲突能否解决（即符合SLR-1-文法）" class="headerlink" title="如何判断移进-归约冲突能否解决（即符合SLR(1)文法）"></a>如何判断移进-归约冲突能否解决（即符合SLR(1)文法）</h1><ul>
<li>归约条件对应的FOLLOW和移进符号无交集，冲突就能被解决                                <img src="https://api2.mubu.com/v3/document_image/20027dc2-da79-4f2d-9667-f0dba093add7-3810853.jpg" alt="img">                            </li>
<li>在状态转换图中既要写S集又又要补充R集就有冲突</li>
</ul>
<h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><h2 id="正规式到dfa最小化"><a href="#正规式到DFA最小化" class="headerlink" title="正规式到DFA最小化"></a>正规式到DFA最小化</h2><ul>
<li>写出正规式</li>
<li>根据正规式转换规则画出状态图</li>
<li>根据状态图画状态矩阵得到NFA确定化的DFA</li>
<li>简化状态矩阵得到最小化的DFA</li>
</ul>
<h2 id="ll1文法的判断"><a href="#LL1文法的判断" class="headerlink" title="LL1文法的判断"></a>LL1文法的判断</h2><ul>
<li>检查是否有左递归</li>
<li>检查首相集合是否有交集</li>
<li>检查FIRST和FOLLOW是否有交集</li>
</ul>
<h2 id="ll1文法的构造和预测分析表"><a href="#LL1文法的构造和预测分析表" class="headerlink" title="LL1文法的构造和预测分析表"></a>LL1文法的构造和预测分析表</h2><ul>
<li>消除左递归</li>
<li>写出FIRST集和FOLLOW集</li>
<li>根据FIRST集和FOLLOW集写预测分析表</li>
</ul>
<h2 id="lr0文法的判断"><a href="#LR0文法的判断" class="headerlink" title="LR0文法的判断"></a>LR0文法的判断</h2><ul>
<li>不存在移进归约冲突</li>
</ul>
<h2 id="lr0活前缀dnf及分析表"><a href="#LR0活前缀DNF及分析表" class="headerlink" title="LR0活前缀DNF及分析表"></a>LR0活前缀DNF及分析表</h2><ul>
<li>编写活前缀DNF图</li>
<li>画ACTION、GOTO表</li>
</ul>
<h2 id="sl1判断"><a href="#SL1判断" class="headerlink" title="SL1判断"></a>SL1判断</h2><ul>
<li>编写活前缀DNF图</li>
<li>归约条件对应的FOLLOW和移进符号无交集，冲突就能被解决     </li>
</ul>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="pl0程序符号表"><a href="#PL0程序符号表" class="headerlink" title="PL0程序符号表"></a>PL0程序符号表</h2><p><img src="D:\Mark\myBlog\blog\source_posts\image\image-20210708082852726.png"></p>
<ul>
<li><p>层次/值</p>
<blockquote>
<p>简单来说：内嵌的VAL的值要+1</p>
</blockquote>
<p><img src="D:\Mark\myBlog\blog\source_posts\image\image-20210708084642163.png" alt="image-20210708084642163"></p>
</li>
</ul>
<ul>
<li><p>地址</p>
<blockquote>
<p>在一起的加1处理，分程序的再从头填</p>
</blockquote>
<p><img src="D:\Mark\myBlog\blog\source_posts\image\image-20210708084849631.png" alt="image-20210708084849631"></p>
</li>
</ul>
<h2 id="语句翻译成四元式"><a href="#语句翻译成四元式" class="headerlink" title="语句翻译成四元式"></a>语句翻译成四元式</h2><p><img src="D:\Mark\myBlog\blog\source_posts\image\image-20210708083443482.png" alt="image-20210708083443482"></p>
<h2 id="基本块画流图"><a href="#基本块画流图" class="headerlink" title="基本块画流图"></a>基本块画流图</h2><p><img src="D:\Mark\myBlog\blog\source_posts\image\image-20210708085524376.png" alt="image-20210708085524376"><img src="D:\Mark\myBlog\blog\source_posts\image\image-20210708085538695.png" alt="image-20210708085538695"><img src="D:\Mark\myBlog\blog\source_posts\image\image-20210708085559576.png" alt="image-20210708085559576"></p>
<h2 id="程序流图画必经结点回边循环"><a href="#程序流图画必经结点，回边，循环" class="headerlink" title="程序流图画必经结点，回边，循环"></a>程序流图画必经结点，回边，循环</h2><p><img src="D:\Mark\myBlog\blog\source_posts\image\image-20210708090058615.png" alt="image-20210708090058615"></p>
<h2 id="pl0程序运行栈"><a href="#PL0程序运行栈" class="headerlink" title="PL0程序运行栈"></a>PL0程序运行栈</h2><p><img src="D:\Mark\myBlog\blog\source_posts\image\image-20210708091723348-1625720540375.png" alt="image-20210708091723348"></p>
]]></content>
      <tags>
        <tag>笔记B站</tag>
      </tags>
  </entry>
</search>
